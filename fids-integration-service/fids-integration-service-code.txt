afas.db.config - 
import mysql from "mysql2/promise";
import dotenv from "dotenv";

dotenv.config();

const afasDb = mysql.createPool({
    host: process.env.AFS_DB_HOST || "localhost",  // ‚úÖ AFAS Database
    user: process.env.AFS_DB_USER || "afas_user",
    password: process.env.AFS_DB_PASS || "Infosoft@123",
    database: process.env.AFS_DB_NAME || "afas",
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
});

export default afasDb;



fids.db.config - 

import mysql from "mysql2/promise";
import dotenv from "dotenv";

dotenv.config();

const fidsDb = mysql.createPool({
    host: process.env.FIDS_DB_HOST || "192.168.10.145",// ‚úÖ FIDS Server (Ubuntu)
    user: process.env.FIDS_DB_USER || "afas_user",
    password: process.env.FIDS_DB_PASS || "Infosoft@123",
    database: process.env.FIDS_DB_NAME || "fids",
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
});

export default fidsDb;






fids.controller.js- 

// fids-integration-service/controllers/fids.controller.js
import fidsDb from "../config/fids_db.config.js";
import afasDb from "../config/afas_db.config.js";
import { getAnnouncementSequence } from "../services/announcement.service.js"; // Assuming this service calls script-manager
import axios from "axios";

const LOGS_SERVICE_URL = process.env.LOGS_SERVICE_URL || "http://localhost:4025/api/logs";
const SERVICE_NAME = "FIDSIntegrationService";

async function sendToLogsService(logData) {
  try {
    await axios.post(LOGS_SERVICE_URL, {
      service_name: SERVICE_NAME,
      ...logData,
    });
  } catch (error) {
    console.error(`${SERVICE_NAME} - Error sending log:`, error.message);
  }
}

export const pollFIDSData = async () => {
  console.log(`üîÑ ${SERVICE_NAME}: Polling FIDS database for flight updates...`);
  sendToLogsService({ log_type: "FIDS_POLL_START", message: "Polling FIDS database." });
  try {
    const [rows] = await fidsDb.execute(
      `SELECT DISTINCT t1.*, t2.CityName, t3.AirlineName 
       FROM aft AS t1
       JOIN citymaster AS t2 ON t1.CityIATACode = t2.IATACityCode
       JOIN airlinemaster AS t3 ON t1.IATAAirlineCode = t3.IATAAirlineCode`
    );

    if (rows.length === 0) {
      console.log(`‚úÖ ${SERVICE_NAME}: No new flight data from FIDS.`);
      // sendToLogsService({ log_type: "FIDS_POLL_INFO", message: "No new flight data from FIDS." });
      return;
    }
    sendToLogsService({ log_type: "FIDS_POLL_DATA_RECEIVED", message: `Received ${rows.length} flight entries from FIDS.` });

    const [announcementTypes] = await afasDb.execute(`SELECT type, area FROM announcement_types`);
    const announcementMap = {};
    announcementTypes.forEach(({ type, area }) => { announcementMap[type] = area; });

    for (const flight of rows) {
      const logContext = { flight_number: flight.FlightCode, details: { fids_status: flight.Status, arr_dep: flight.ArrDepFlag } };
      const area = flight.ArrDepFlag === 1 ? "Arrival" : "Departure";
      const announcementType = mapFlightStatusToAnnouncement(flight.Status, flight.ArrDepFlag, announcementMap);

      if (!announcementType) {
        sendToLogsService({ ...logContext, log_type: "WARNING", message: `No announcement mapping for FIDS status: ${flight.Status}` });
        continue;
      }
      const sequence = await getAnnouncementSequence(announcementType, area); // This calls script-manager
      if (!sequence) {
        sendToLogsService({ ...logContext, log_type: "WARNING", message: `No script sequence found for type: ${announcementType} in area: ${area}` });
        continue;
      }

      const flightDateIST = new Date((flight.FlightDate + 19800) * 1000);
      const flightDate = flightDateIST.toISOString().split("T")[0];

      const [existing] = await afasDb.execute(
        `SELECT id, status, flight_date, row_update_date FROM playlist 
         WHERE flight_code = ? AND arr_dep_flag = ? LIMIT 1`,
        [flight.FlightCode, flight.ArrDepFlag]
      );

      const newStatus = mapPlaylistStatus(flight.Status);
      const playlistEntry = {
        flight_code: flight.FlightCode, flight_number: flight.FlightNumber,
        gate_number: flight.GateBelt || null, announcement_type: announcementType,
        sequence, status: newStatus, city_name: flight.CityName, airline_name: flight.AirlineName,
        flight_date: flightDate, row_update_date: flight.RowUpdateDate, arr_dep_flag: flight.ArrDepFlag,
        std: flight.STASTD || null, etd: flight.ETAETD || null
      };

      if (existing.length > 0) {
        if (existing[0].row_update_date < flight.RowUpdateDate) {
          await afasDb.execute(
            `UPDATE playlist SET gate_number = ?, announcement_type = ?, sequence = ?, status = ?, 
             city_name = ?, airline_name = ?, flight_date = ?, row_update_date = ?, 
             std = ?, etd = ? WHERE flight_code = ? AND arr_dep_flag = ?`,
            [playlistEntry.gate_number, playlistEntry.announcement_type, JSON.stringify(playlistEntry.sequence),
             playlistEntry.status, playlistEntry.city_name, playlistEntry.airline_name, playlistEntry.flight_date,
             playlistEntry.row_update_date, playlistEntry.std, playlistEntry.etd, playlistEntry.flight_code, playlistEntry.arr_dep_flag]
          );
          sendToLogsService({ ...logContext, log_type: "FLIGHT_DATA_UPDATED", message: `Updated flight in AFAS playlist. New status: ${newStatus}`, details: { new_fids_row_update_date: flight.RowUpdateDate } });
        } else {
            // console.log(`Flight ${flight.FlightCode} already up-to-date in AFAS playlist.`);
        }
      } else {
        await afasDb.execute(
          `INSERT INTO playlist (flight_code, flight_number, gate_number, announcement_type, sequence, status, city_name, airline_name, flight_date, row_update_date, arr_dep_flag, std, etd, created_at) 
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())`,
          [playlistEntry.flight_code, playlistEntry.flight_number, playlistEntry.gate_number, playlistEntry.announcement_type,
           JSON.stringify(playlistEntry.sequence), playlistEntry.status, playlistEntry.city_name, playlistEntry.airline_name,
           playlistEntry.flight_date, playlistEntry.row_update_date, playlistEntry.arr_dep_flag, playlistEntry.std, playlistEntry.etd]
        );
        sendToLogsService({ ...logContext, log_type: "FLIGHT_DATA_ADDED", message: `Added new flight to AFAS playlist. Status: ${newStatus}`, details: { fids_row_update_date: flight.RowUpdateDate } });
      }
    }
    sendToLogsService({ log_type: "FIDS_POLL_SUCCESS", message: "FIDS data polling and processing complete." });
  } catch (error) {
    console.error(`‚ùå ${SERVICE_NAME} Error polling FIDS data:`, error.message, error.stack);
    sendToLogsService({ log_type: "ERROR", message: `Error polling FIDS data: ${error.message}` });
  }
};

// Helper functions (mapFlightStatusToAnnouncement, mapPlaylistStatus) remain the same
const mapFlightStatusToAnnouncement = (status, arrDepFlag, announcementMap) => {
  let area = arrDepFlag === 1 ? "Arrival" : "Departure";
  const lowerStatus = status.trim().toLowerCase();
  if (lowerStatus === "arrived") area = "Arrival";
  const statusMap = {
    "scheduled": { "Arrival": "Scheduled", "Departure": "Scheduled" }, "arrived": { "Arrival": "Arrived" },
    "departed": { "Departure": "Departed" }, "diverted": { "Arrival": "Diverted", "Departure": "Diverted" },
    "boarding": { "Departure": "Boarding" }, "check in": { "Departure": "Check IN" },
    "final boarding": { "Departure": "Final Boarding Call" }, "cancelled": { "Arrival": "Cancelled", "Departure": "Cancelled" },
    "rescheduled": { "Arrival": "Rescheduled", "Departure": "Rescheduled" }, "gate closed": { "Departure": "Gate Closed" },
    "on time": { "Arrival": "On Time", "Departure": "On Time" }, "delayed": { "Arrival": "Delayed", "Departure": "Delayed" }
  };
  const mappedType = statusMap[lowerStatus]?.[area];
  if (!mappedType || !announcementMap[mappedType]) return null;
  return mappedType;
};

const mapPlaylistStatus = (fidsStatus) => {
  const statusMap = {
    "Scheduled": "Scheduled", "Arrived": "Arrived", "Departed": "Completed", "Diverted": "Diverted",
    "Boarding": "Boarding", "Check IN": "In Progress", "Final Boarding": "In Progress", "Cancelled": "Cancelled",
    "Rescheduled": "Scheduled", "Gate Closed": "Closed", "On Time": "Scheduled", "Postponed": "Postponed",
    "Preponed": "Scheduled", "Indefinite": "Delayed", "Additional": "Scheduled", "Expected": "Scheduled",
    "Delayed": "Delayed", "Security": "Security"
  };
  return statusMap[fidsStatus.trim()] || "Scheduled";
};




fids.routes.js - 
import express from "express";
import { pollFIDSData } from "../controllers/fids.controller.js";

const router = express.Router();

// ‚úÖ Manually trigger FIDS polling (for debugging)
router.get("/poll", async (req, res) => {
  await pollFIDSData();
  res.json({ message: "FIDS polling triggered manually." });
});

export default router;





announcement.services.js - 
import axios from "axios";
import dotenv from "dotenv";
import fidsDb from "../config/fids_db.config.js"; // FIDS Database
import afasDb from "../config/afas_db.config.js"; // AFAS Database
dotenv.config();

// ‚úÖ Get the announcement sequence from Script Manager Service
export const getAnnouncementSequence = async (announcementType, area) => {
  try {
      console.log(`üîç Fetching script for: ${announcementType} in ${area}`);
      
      const [rows] = await afasDb.execute(
          `SELECT sequence FROM scripts WHERE announcement_type = ? AND area = ? LIMIT 1`,
          [announcementType, area]
      );

      if (rows.length === 0) {
          console.log(`‚ö† No script found for ${announcementType} in ${area}`);
          return null;
      }

      let sequenceData = rows[0].sequence;

      // ‚úÖ Check if the sequence is already valid JSON
      if (typeof sequenceData === "string") {
          if (!sequenceData.startsWith("[") || !sequenceData.endsWith("]")) {
              console.warn(`‚ö† Sequence is not a valid JSON array, treating it as a string: ${sequenceData}`);
              return [sequenceData]; // Return as an array
          }

          try {
              return JSON.parse(sequenceData); // Try parsing JSON
          } catch (jsonError) {
              console.error(`‚ùå Error parsing sequence JSON:`, jsonError);
              return null;
          }
      }

      return sequenceData; // Return directly if already JSON
  } catch (error) {
      console.error(`‚ùå Error fetching sequence:`, error);
      return null;
  }
};


// ‚úÖ Send the processed announcement to the Playlist Service
export const sendToPlaylist = async (announcementData) => {
  try {
    console.log(`üì¢ Sending to playlist:`, announcementData);
    
    const response = await axios.post(`${process.env.PLAYLIST_SERVICE_URL}/playlist`, announcementData);

    console.log(`‚úÖ Playlist API Response:`, response.data);
    return response.data;
    
  } catch (error) {
    console.error(`‚ùå Error sending to playlist:`, error.message);
    console.error(`‚ùå Full Error:`, error.response?.data || error);
    return null;
  }
};




.env - 
# ‚úÖ FIDS Database (Ubuntu Server)
FIDS_DB_HOST=192.168.10.145
FIDS_DB_USER=afas_user
FIDS_DB_PASS=Infosoft@123
FIDS_DB_NAME=fids

# ‚úÖ AFAS Database (Local)
AFAS_DB_HOST=localhost
AFAS_DB_USER=root
AFAS_DB_PASS=Infosoft@123
AFAS_DB_NAME=afas_db

# ‚úÖ Services
SCRIPT_MANAGER_SERVICE_URL=http://localhost:4006
PLAYLIST_SERVICE_URL=http://localhost:4005




app.js - 
import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import fidsRoutes from "./routes/fids.routes.js";
import { pollFIDSData } from "./controllers/fids.controller.js";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4007;

// Define __dirname for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

// API Routes
app.use("/fids", fidsRoutes);

// Start polling every 10 seconds
setInterval(pollFIDSData, 10000);

// Start server
app.listen(PORT, () => {
  console.log(`‚úÖ FIDS Integration Service running on http://localhost:${PORT}`);
});
