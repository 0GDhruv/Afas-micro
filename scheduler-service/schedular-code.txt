db.config.js - 
import mysql from "mysql2/promise";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Create a connection pool
const db = mysql.createPool({
  host: process.env.DB_HOST || "localhost",
  user: process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || "Infosoft@123",
  database: process.env.DB_NAME || "afas",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

export default db;





schedular.controller.js - 
import axios from "axios";
import db from "../config/db.config.js";
import player from "play-sound";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const audioPlayer = player();

const playAudio = (filePath) => {
  return new Promise((resolve) => {
    audioPlayer.play(filePath, (err) => {
      if (err) console.error("üî¥ Error playing audio:", err.message);
      else console.log("üîä Playing audio:", filePath);
      resolve();
    });
  });
};

export const executeSchedules = async () => {
  try {
    console.log("‚è∞ Running Scheduler...");

    const now = new Date();
    const currentTime = now.toTimeString().slice(0, 5);
    const currentDay = now.toLocaleString("en-US", { weekday: "short" });

    // 1. üîä Play special messages
    const [schedules] = await db.execute("SELECT * FROM schedules");
    for (const schedule of schedules) {
      const timings = Array.isArray(schedule.timing) ? schedule.timing : JSON.parse(schedule.timing);
      const frequency = schedule.frequency?.split(",") || [];

      if (
        timings.includes(currentTime) &&
        (frequency.includes("all") || frequency.includes(currentDay))
      ) {
        const audioPath = path.join(
          __dirname,
          "../../upload-service/uploads",
          schedule.language,
          "specialmessage",
          schedule.audioId
        );
        console.log(`üì¢ Playing special message: ${schedule.name}`);
        await playAudio(audioPath);
      }
    }

    // 2. üß† Get settings
    const { data: settings } = await axios.get("http://localhost:4010/settings");
    const {
      languages,
      language_order,
      frequency = 1,
      audio_lag = 2,
    } = settings;

    // 3. üéô Fetch pending flight announcements
    const { data: announcements } = await axios.get("http://localhost:4008/audio/active");
    if (!announcements.length) {
      console.log("üì≠ No active flight announcements.\n");
      return;
    }

    // 4. üîÅ Sequential playback of flights
    for (const { flight_number, audio_path, language } of announcements) {
      console.log(`üéß Playing Flight ${flight_number} ‚Üí ${language}`);

      const fullPath = path.join(__dirname, "../../audio-processing-service/output_audio", audio_path);
      if (!fs.existsSync(fullPath)) {
        console.warn(`‚ö†Ô∏è File not found: ${fullPath}`);
        continue;
      }

      for (let i = 0; i < frequency; i++) {
        console.log(`üîÅ [${language.toUpperCase()}] Repeat ${i + 1}/${frequency}`);
        await playAudio(fullPath);
        if (i < frequency - 1) {
          await new Promise((r) => setTimeout(r, audio_lag * 1000));
        }
      }

      // ‚úÖ Mark flight as announced
      await axios.post("http://localhost:4008/audio/mark-announced", { flight_number });
      console.log(`‚úÖ Marked flight ${flight_number} as Completed`);

      // ‚è≥ Wait before next flight
      await new Promise((r) => setTimeout(r, audio_lag * 1000));
    }

  } catch (err) {
    console.error("‚ùå Error in scheduler execution:", err?.message || err);
  }
};

// ======== REST APIs ========

export const getLanguages = async (req, res) => {
  try {
    const { data } = await axios.get("http://localhost:4003/languages");
    res.json(data);
  } catch (err) {
    res.status(500).json({ message: "Upload Service error", error: err.message });
  }
};

export const getAudioFiles = async (req, res) => {
  try {
    const { language } = req.query;
    const { data } = await axios.get("http://localhost:4003/audio-files", {
      params: { language, type: "specialmessage" },
    });
    res.json(data);
  } catch (err) {
    res.status(500).json({ message: "Upload Service error", error: err.message });
  }
};

export const createSchedule = async (req, res) => {
  const { name, language, audioId, timings, startDate, endDate, frequency } = req.body;
  try {
    await db.execute(
      "INSERT INTO schedules (name, language, audioId, timing, start_date, end_date, frequency) VALUES (?, ?, ?, ?, ?, ?, ?)",
      [name, language, audioId, JSON.stringify(timings), startDate, endDate, frequency.join(",")]
    );
    res.status(201).send("Schedule created successfully.");
  } catch (err) {
    res.status(500).json({ message: "Database error", error: err.message });
  }
};

export const getSchedules = async (req, res) => {
  try {
    const [schedules] = await db.execute("SELECT * FROM schedules");
    res.json(schedules);
  } catch (err) {
    res.status(500).json({ message: "Database error", error: err.message });
  }
};

export const deleteSchedule = async (req, res) => {
  const { id } = req.params;
  try {
    await db.execute("DELETE FROM schedules WHERE id = ?", [id]);
    res.status(204).send();
  } catch (err) {
    res.status(500).json({ message: "Database error", error: err.message });
  }
};

export const announceFlight = async (req, res) => {
  const { flight_number, audio_path, language } = req.body;
  if (!audio_path) return res.status(400).json({ message: "Missing audio_path" });

  const fullPath = path.join(__dirname, "../../audio-processing-service/output_audio", audio_path);

  if (!fs.existsSync(fullPath)) {
    console.error("‚ùå Audio file not found:", fullPath);
    return res.status(404).json({ message: "Audio file not found" });
  }

  try {
    console.log(`üéß Announcing Flight ${flight_number} from: ${fullPath}`);
    await playAudio(fullPath);
    res.status(200).json({ message: "Flight announcement played" });
  } catch (err) {
    console.error("‚ùå Playback error:", err.message);
    res.status(500).json({ message: "Failed to play audio", error: err.message });
  }
};




schedular.routes.js - 
import express from "express";
import { getLanguages, getAudioFiles, createSchedule, getSchedules, deleteSchedule,announceFlight} from "../controllers/schedular.controller.js";

const router = express.Router();

router.get("/languages", getLanguages); // Get available languages
router.get("/audio-files", getAudioFiles); // Get audio files for a language
router.post("/", createSchedule); // Create a new schedule
router.get("/", getSchedules); // Get all schedules
router.delete("/:id", deleteSchedule); // Delete a schedule
router.post("/announce", announceFlight);

export default router;

app.js - 
import express from "express";
import path from "path";
import dotenv from "dotenv";
import cors from "cors";
import schedulerRoutes from "./routes/schedular.routes.js";
import { executeSchedules } from "./controllers/schedular.controller.js";

dotenv.config();
const app = express();
const __dirname = path.resolve();

app.use(cors()); // üî• Enable CORS
app.use(express.json());
app.use("/scheduler", schedulerRoutes);

setInterval(() => {
  console.log("Checking for schedules...");
  executeSchedules();
}, 60000); // Every 60s

const PORT = process.env.PORT || 4004;
app.listen(PORT, () => {
  console.log(`‚úÖ Scheduler Service running on http://localhost:${PORT}`);
});
