style.css-
/* Reset and base styling */
body, html {
  margin: 0;
  padding: 0;
  font-family: "Segoe UI", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; /* Added fallback fonts */
  background-color: #111;
  color: #eee;
  height: 100%;
  line-height: 1.6;
  font-size: 16px; /* Base font size */
}

a {
  text-decoration: none;
  color: inherit;
  transition: color 0.2s ease-in-out;
}
a:hover {
    color: #0f0; /* AFAS Green for link hover */
}

button {
  padding: 8px 12px;
  background-color: #444;
  color: #fff;
  border: 1px solid #555; /* Added subtle border */
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
  font-size: 0.95em;
}
button:hover:not(:disabled) {
  background-color: #555;
  border-color: #666;
}
button:disabled {
    background-color: #2a2a2a;
    color: #555;
    cursor: not-allowed;
    border-color: #3a3a3a;
}
button i.fas, button i.far, button i.fab { /* Font Awesome icons in buttons */
    margin-right: 6px;
}


/* Layout Wrapper */
.wrapper {
  display: flex;
  min-height: 100vh;
}

/* Sidebar Styling */
.sidebar {
  width: 230px; /* Slightly wider */
  background-color: #000;
  padding: 20px 0; /* Adjusted padding */
  display: flex;
  flex-direction: column;
  border-right: 1px solid #282828; /* Darker border */
  height: 100vh;
  position: fixed;
  left: 0;
  top: 0;
  z-index: 1001;
  overflow-y: auto;
}
.sidebar h2 {
  text-align: center;
  color: #0f0; /* AFAS Green for title */
  font-size: 24px; /* Larger title */
  margin-top: 0;
  margin-bottom: 25px;
  padding: 0 10px;
  letter-spacing: 1px;
}
.sidebar a {
  padding: 12px 20px; /* Consistent padding */
  color: #ccc;
  border-left: 4px solid transparent;
  margin-bottom: 2px; /* Reduced margin */
  text-decoration: none;
  display: flex; /* For icon alignment */
  align-items: center;
  font-size: 0.95em;
  transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out, border-left-color 0.2s ease-in-out;
}
.sidebar i.fa-fw {
    margin-right: 10px; /* Space between icon and text */
    width: 20px; /* Ensure icons align */
    text-align: center;
}
.sidebar a:hover {
  background-color: #1a1a1a; /* Darker hover */
  color: #0f0; /* AFAS Green on hover */
  border-left-color: #0f0;
}
.sidebar a.active {
  background-color: #222; /* Active background */
  color: #0f0;
  border-left-color: #0f0;
  font-weight: 600; /* Slightly bolder */
}

/* Top Header Styling */
header {
  height: 60px;
  background-color: #111;
  border-bottom: 1px solid #2a2a2a;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 25px;
  position: fixed;
  top: 0;
  left: 230px; /* Match sidebar width */
  right: 0;
  z-index: 1000;
}
header h1 {
  font-size: 1.6em;
  font-weight: 300;
  color: #e0e0e0;
  margin: 0;
}
header h1 #flightNumberDisplay { /* For flight settings page */
    color: #0f0;
    font-weight: 500;
}
button.logout-btn {
  background-color: #333;
  border: 1px solid #555;
  padding: 8px 15px;
  border-radius: 4px;
  color: #fff;
}
button.logout-btn:hover {
  background-color: #d32f2f;
  border-color: #c00;
  color: #fff;
}

/* Main Content Area Styling */
.content, .main-content { /* .main-content was used on some older pages */
  flex: 1;
  padding: 30px; /* More padding */
  margin-left: 230px; /* Account for fixed sidebar */
  margin-top: 60px; /* Account for fixed header */
  overflow-y: auto;
  background-color: #111; /* Ensure content area also has the base background */
}

/* Section Styling (for dashboard, settings, upload form etc.) */
.dashboard-section, .settings-section, .form-section, .table-section {
  margin-bottom: 30px;
  background-color: #1c1c1c; /* Consistent card background */
  padding: 20px 25px;
  border-radius: 8px;
  border: 1px solid #282828; /* Subtle border for cards */
  box-shadow: 0 3px 6px rgba(0,0,0,0.25); /* Softer shadow */
}
.dashboard-section h2, .settings-section h2, .form-section h2, .table-section h2 {
  margin-top: 0;
  border-bottom: 1px solid #333;
  padding-bottom: 12px;
  margin-bottom: 20px;
  font-size: 1.4em; /* Consistent section titles */
  font-weight: 400;
  color: #0f0; /* AFAS Green for section titles */
}


/* General Table Styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 0; /* Handled by section padding or table container */
  background-color: transparent; /* Table background handled by container like #activeAnnouncementsTableContainer */
}
th, td {
  padding: 12px 15px;
  border: 1px solid #333; /* Keep this for structure within tables */
  text-align: left;
  vertical-align: middle;
}
th {
  background-color: #2a2a2a; /* Darker header background */
  color: #0f0; /* AFAS Green for table headers */
  font-weight: 600; /* Bolder headers */
  text-transform: uppercase;
  font-size: 0.9em;
  letter-spacing: 0.5px;
}
tbody tr:hover {
  background-color: #282828; /* Hover effect for table rows */
}
td {
    color: #ccc; /* Default text color for table data */
}
.loading-text, .no-data-text { /* For table loading/empty states */
    text-align: center !important; /* Override default left align */
    font-style: italic;
    color: #888;
    padding: 20px !important;
}


/* General Form Styling */
form {
  display: flex;
  flex-direction: column;
  gap: 18px; /* Spacing between form groups */
  margin-bottom: 0; /* Handled by section padding */
}
.form-group {
    margin-bottom: 0; /* Using gap on form for spacing */
}
form label {
  margin-bottom: 8px;
  font-weight: 600;
  color: #ddd;
  display: block;
  font-size: 0.95em;
}
form input[type="text"],
form input[type="email"],
form input[type="password"],
form input[type="number"],
form input[type="date"],
form input[type="time"],
form select,
form textarea {
  padding: 10px 12px;
  background-color: #222;
  color: #eee;
  border: 1px solid #444;
  border-radius: 4px;
  width: 100%;
  box-sizing: border-box; /* Important for width calculation */
  font-size: 1em;
}
form input:focus,
form select:focus,
form textarea:focus {
  outline: none;
  border-color: #0f0; /* AFAS green accent on focus */
  box-shadow: 0 0 0 3px rgba(0, 255, 0, 0.15); /* Softer focus glow */
}
form button[type="submit"] {
  width: fit-content;
  background-color: #0f0; /* AFAS green for primary actions */
  color: #111;
  font-weight: bold;
  padding: 10px 20px;
  margin-top: 10px; /* Space above button */
  border: none; /* Primary buttons might not need border */
}
form button[type="submit"]:hover {
  background-color: #0d0; /* Darker green on hover */
}
form small { /* For help text below inputs/lists */
    display: block;
    margin-top: 5px;
    font-size: 0.85em;
    color: #999;
}
/* Status messages for forms (like upload, settings) */
#uploadStatus, #loadingMessage, #errorMessage,
#flightLoadingMessage, #flightErrorMessage {
    text-align: center;
    padding: 10px;
    margin-top: 10px;
    border-radius: 4px;
    font-size: 0.9em;
}
#uploadStatus[style*="color: red"], /* For legacy error indication */
#errorMessage, #flightErrorMessage, /* General error messages */
.error-message /* Class based error message */ {
    background-color: rgba(239, 83, 80, 0.15);
    border: 1px solid rgba(239, 83, 80, 0.4);
    color: #ff8a80;
}
#uploadStatus[style*="color: #0f0"], /* For legacy success indication */
.success-message /* Class based success message */ {
    background-color: rgba(0, 200, 83, 0.15);
    border: 1px solid rgba(0, 200, 83, 0.4);
    color: #69f0ae;
}
.info-message { /* For 'Synthesizing...' or initial state */
    background-color: rgba(80, 120, 180, 0.15);
    border-color: rgba(80, 120, 180, 0.4);
    color: #8ab4f8;
}
.warning-message {
    background-color: rgba(255, 160, 0, 0.15);
    border-color: rgba(255, 160, 0, 0.4);
    color: #ffd180;
}


/* Language Tabs Styling */
.language-tabs {
  margin-bottom: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}
.language-tab, .lang-tab, .lang-btn { /* Common class for all language tab buttons */
  background-color: #282828;
  border: 1px solid #444;
  color: white;
  padding: 8px 15px;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.2s, border-color 0.2s, color 0.2s;
  font-size: 0.9em;
}
.language-tab.active, .lang-tab.active, .lang-btn.active {
  background-color: #0f0;
  border-color: #0f0;
  color: #111;
  font-weight: bold;
}
#languageTabsLoading { /* For upload page language tabs loading text */
    font-style: italic;
    color: #888;
    padding: 10px 0;
}


/* Draggable Language List (for Settings pages) */
.draggable-list {
  list-style: none;
  padding: 10px;
  border: 1px solid #444;
  background: #282828; /* Slightly lighter than input fields */
  color: #fff;
  min-height: 80px;
  max-width: 350px; /* Max width for the list */
  margin-bottom: 5px; /* Space before the small help text */
  border-radius: 4px;
}
.draggable-list li {
  padding: 10px 12px;
  margin-bottom: 6px;
  background-color: #333; /* Background for each draggable item */
  border: 1px solid #484848;
  border-radius: 3px;
  cursor: move;
  user-select: none; /* Prevent text selection while dragging */
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.draggable-list li:last-child { margin-bottom: 0; }
.draggable-list li:hover { background-color: #3a3a3a; }
.draggable-list li[style*="opacity: 0.5"] { /* Style for item being dragged */
    background-color: #4CAF50; /* Highlight color when dragging */
    color: #fff;
}


/* Input Specifics & Enhancements */
form input[type="time"] { width: auto; min-width: 130px; }
form select[multiple] { height: auto; min-height: 120px; } /* For multi-select boxes */

input[type="file"] { /* File input on Upload page */
  padding: 8px;
  background-color: #282828;
  border: 1px solid #444;
  border-radius: 4px;
  color: #ccc; /* Color of "No file chosen" text */
}
input[type="file"]::file-selector-button { /* Styling the button part of file input */
  background-color: #0f0; /* AFAS Green */
  color: #111;
  border: none;
  padding: 8px 12px;
  border-radius: 3px;
  cursor: pointer;
  margin-right: 10px;
  font-weight: 500; /* Make button text slightly bolder */
}
input[type="file"]::file-selector-button:hover { background-color: #0d0; } /* Darker green on hover */

.language-checkboxes { /* Container for language checkboxes on settings pages */
    display: flex;
    flex-wrap: wrap;
    gap: 15px 25px; /* Row and column gap */
    margin-bottom: 10px;
}
.language-checkboxes label { /* Individual checkbox label */
    font-weight: normal;
    color: #ddd;
    display: inline-flex;
    align-items: center;
    cursor: pointer;
}
.language-checkboxes input[type="checkbox"] {
    width: auto; /* Override form default width */
    margin-right: 8px;
    accent-color: #0f0; /* Color of the checkbox itself */
    transform: scale(1.1); /* Slightly larger checkbox for better visibility */
}
.inline-checkbox-label { /* For "Enable" checkboxes next to selects (e.g., regional language) */
    display: inline-flex !important;
    align-items: center;
    font-weight: normal !important;
    margin-left: 10px; /* Space from the select dropdown */
}
.inline-checkbox-label input[type="checkbox"] { width: auto; margin-right: 5px; }


/* === Dashboard Page Specific Styles === */
#activeAnnouncementsTableContainer { /* Container for the active announcements table */
  background-color: #222; /* Dark background for the table area */
  border: 1px solid #333;
  border-radius: 5px;
  overflow-x: auto; /* Allow horizontal scroll on small screens */
}
/* #activeAnnouncementsTable th is covered by general th styling */

.action-btn { /* General class for action buttons within tables */
    padding: 6px 10px;
    font-size: 0.85em;
    margin-right: 5px; /* If multiple buttons in a cell */
    background-color: #5c6bc0; /* Example: Indigo for general actions */
    color: white;
    border: none;
    border-radius: 3px;
}
.action-btn:hover { background-color: #3949ab; } /* Darker on hover */
.action-btn i { margin-right: 4px; }

#activeAnnouncementsTable .settings-btn { /* Specific style for flight settings button */
    padding: 5px 8px; /* Make it small */
    font-size: 0.9em; /* Adjust icon size if needed */
    line-height: 1; /* Helps align icon if it was text */
}
#activeAnnouncementsTable .settings-btn i {
    margin-right: 0; /* No margin if icon only */
}


.pagination-controls { /* Common pagination controls style */
  text-align: center;
  margin-top: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
}
.pagination-controls button { /* Buttons within pagination */
  background-color: #333;
  color: #fff;
  border: 1px solid #555;
  padding: 8px 15px;
  border-radius: 4px;
}
.pagination-controls button:hover:not(:disabled) { background-color: #0f0; color: #111; }
#currentPageInfo, #pageInfo /* Page info text in pagination */ {
  color: #ccc;
  font-size: 0.9em;
}

.dashboard-summary-grid { /* Grid for summary boxes on dashboard */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Responsive columns */
  gap: 25px;
}
.summary-box { /* Individual summary box */
  background-color: #1c1c1c;
  padding: 20px;
  border-radius: 8px;
  border: 1px solid #282828;
  box-shadow: 0 3px 6px rgba(0,0,0,0.25);
}
.summary-box h3 { /* Title within summary box */
  margin-top: 0;
  font-size: 1.1em;
  color: #0f0; /* AFAS Green */
  margin-bottom: 15px;
  padding-bottom: 8px;
  border-bottom: 1px solid #333;
}
.summary-box p, .summary-box ul { font-size: 0.9em; margin-bottom: 10px; color: #ccc; }
.summary-box ul { list-style: none; padding-left: 0; }
.summary-box ul li { /* List items in summary (e.g., uploaded audios) */
  padding: 8px 0;
  border-bottom: 1px dotted #333;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.summary-box ul li:last-child { border-bottom: none; }
.summary-box span { /* For dynamic values (counts) in summary boxes */
  font-weight: bold;
  color: #fff;
}
.summary-box .summary-pagination { /* Pagination within a summary box */
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 8px;
  margin-top: 15px;
  padding-top: 10px;
  border-top: 1px solid #333;
}
.summary-box .summary-page-btn { /* Pagination buttons in summary box */
  background-color: #3a3a3a;
  color: #ccc;
  border: 1px solid #555;
  padding: 4px 8px;
  font-size: 0.8em;
  border-radius: 3px;
}
.summary-box .summary-page-btn:hover:not(:disabled) { background-color: #0f0; color: #111; }
.summary-box .summary-page-btn:disabled { background-color: #2a2a2a; color: #555; }
.summary-box .summary-page-info { font-size: 0.85em; color: #aaa; }


/* === Flight Settings Page Specific Styles === */
.back-to-dashboard-btn { /* Button to go back to dashboard */
  background-color: #444;
  color: #fff;
  padding: 8px 15px;
  border-radius: 4px;
  text-decoration: none;
  font-size: 0.9em;
  border: 1px solid #555;
}
.back-to-dashboard-btn:hover { background-color: #555; border-color: #666; }
.back-to-dashboard-btn i { margin-right: 5px; }
#globalRegionalLanguageNameDisplay { /* Display of global regional lang on flight settings */
    font-style: italic;
    font-weight: 500; /* Make it stand out a bit */
    /* Color is set by JS based on whether a name exists */
}


/* === Upload Page Specific Styles === */
#audioTableContainer { /* Also used for upload page table */
  /* Styles are shared with dashboard table container */
}
#audio-table th { color: #0f0; } /* Shared style */
#audio-table td button, #audio-table td .action-btn { /* Delete button on upload page */
    padding: 5px 8px;
    font-size: 0.8em;
    background-color: #d32f2f; /* Red for delete */
    color: white;
    border: none;
}
#audio-table td button:hover, #audio-table td .action-btn:hover { background-color: #b71c1c; }
#audioTablePagination button i { font-size: 0.8em; } /* Icons in upload page pagination */
#audioTablePagination button { padding: 6px 12px; } /* Buttons for upload page pagination */


/* === TTS Utility Page Specific Styles === */
#responseAreaApp p, #statusMessageApp { /* General status paragraph styling */
    /* Covered by general status message styles */
}
#audioPlayerContainerApp audio { /* Audio player on TTS utility */
    width: 100%;
    margin-top: 15px;
    border-radius: 5px;
}
#audioPlayerContainerApp audio::-webkit-media-controls-panel { /* Styling for Chrome/Edge */
  background-color: #2c2c2c;
  border-radius: 5px;
}
#audioPlayerContainerApp audio::-webkit-media-controls-play-button,
#audioPlayerContainerApp audio::-webkit-media-controls-volume-slider,
#audioPlayerContainerApp audio::-webkit-media-controls-mute-button,
#audioPlayerContainerApp audio::-webkit-media-controls-timeline,
#audioPlayerContainerApp audio::-webkit-media-controls-current-time-display,
#audioPlayerContainerApp audio::-webkit-media-controls-time-remaining-display {
  /* Experimental: try to make controls fit dark theme, or use accent color */
  /* filter: invert(1) sepia(0.5) saturate(5) hue-rotate(100deg); /* Example green-ish */
  /* For a more subtle dark theme adaptation: */
   filter: brightness(0.7) invert(1) contrast(1.2) saturate(0.5) hue-rotate(180deg) brightness(1.5);
}
.info-section { /* Info box on TTS utility page */
    margin-top: 30px;
    padding: 15px 20px;
    background-color: #222;
    border-radius: 5px;
    border: 1px solid #333;
}
.info-section h3 {
    color: #0f0;
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 1.2em;
}
.info-section p {
    font-size: 0.95em;
    color: #bbb;
    line-height: 1.6;
    margin-bottom: 10px;
}
.info-section code {
    background-color: #333;
    color: #0f0;
    padding: 3px 6px;
    border-radius: 3px;
    font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    font-size: 0.9em;
}


/* Search Boxes (General) */
input[type="text"]#searchBox, /* Used on Upload, Zones page */
input[type="text"]#search-box /* Used on Scheduler page */ {
    padding: 10px 12px;
    background-color: #222;
    color: #eee;
    border: 1px solid #444;
    border-radius: 4px;
    width: 100%;
    max-width: 450px;
    box-sizing: border-box;
    margin-bottom: 20px;
    display: block; /* To allow margin-bottom and control width */
    font-size: 1em;
}
input[type="text"]#searchBox:focus,
input[type="text"]#search-box:focus {
    outline: none;
    border-color: #0f0;
    box-shadow: 0 0 0 3px rgba(0, 255, 0, 0.15);
}

/* Top bar class (from original, if used on pages other than dashboard) */
.top-bar {
  height: 60px;
  background-color: #111;
  border-bottom: 1px solid #2a2a2a;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 25px;
  position: fixed;
  top: 0;
  left: 230px; /* Match sidebar width */
  right: 0;
  z-index: 1000;
}
.top-bar h1 {
  font-size: 1.6em;
  color: #e0e0e0;
  margin: 0;
  font-weight: 300;
}
    /* frontend-service/public/css/style.css additions */

    .filters-section {
        /* form-section class already provides most styling */
        padding-bottom: 10px; /* Less bottom padding if filters are compact */
    }

    .log-filters {
        display: flex;
        flex-wrap: wrap;
        gap: 15px 20px; /* Row and column gap */
        align-items: flex-end; /* Align items to bottom for mixed height elements */
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        min-width: 180px; /* Minimum width for filter groups */
    }
    .filter-group label {
        margin-bottom: 5px;
        font-size: 0.9em;
    }
    .filter-group input[type="text"],
    .filter-group input[type="date"],
    .filter-group select {
        /* General form input styles should apply */
        padding: 8px 10px; /* Slightly smaller padding for filters */
    }
    .filter-group button {
        padding: 8px 15px; /* Consistent button padding */
        height: 38px; /* Align with input height */
    }
    .filter-group .secondary-action-btn {
        background-color: #555;
    }
    .filter-group .secondary-action-btn:hover {
        background-color: #666;
    }


    #logsTableContainer {
        /* table-section class already provides most styling */
        overflow-x: auto; /* For responsive tables */
    }
    #logsTable td, #logsTable th {
        white-space: nowrap; /* Prevent text wrapping in cells initially */
    }
    #logsTable td:nth-child(6) { /* Message column */
        white-space: normal; /* Allow message column to wrap */
        min-width: 250px;
        max-width: 400px; /* Limit width of message column */
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .view-details-btn {
        background-color: #007bff; /* Blue for view */
        color: white;
        font-size: 0.85em;
        padding: 4px 8px;
    }
    .view-details-btn:hover {
        background-color: #0056b3;
    }

    /* Modal Styling */
    .modal {
      display: none; 
      position: fixed; 
      z-index: 2000; /* Higher than sidebar/header */
      left: 0;
      top: 0;
      width: 100%; 
      height: 100%; 
      overflow: auto; 
      background-color: rgba(0,0,0,0.6); /* Darker semi-transparent background */
    }

    .modal-content {
      background-color: #2c2c2c; /* Dark background for modal */
      margin: 10% auto; 
      padding: 25px;
      border: 1px solid #555;
      width: 70%; 
      max-width: 800px;
      border-radius: 8px;
      position: relative;
      box-shadow: 0 5px 15px rgba(0,0,0,0.5);
      color: #eee;
    }
    .modal-content h2 {
        margin-top: 0;
        color: #0f0; /* AFAS Green */
        border-bottom: 1px solid #444;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }

    .close-modal-btn {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      position: absolute;
      top: 10px;
      right: 20px;
    }
    .close-modal-btn:hover,
    .close-modal-btn:focus {
      color: #fff; /* White on hover */
      text-decoration: none;
      cursor: pointer;
    }
    #logDetailsJson {
        background-color: #1e1e1e; /* Very dark background for pre */
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #333;
        max-height: 400px;
        overflow-y: auto;
        white-space: pre-wrap; /* Wrap long lines */
        word-break: break-all;
        font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
        font-size: 0.9em;
        color: #d4d4d4; /* Light text for pre */
    }




404.html-
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page Not Found | AFAS</title>
    <link rel="stylesheet" href="../css/style.css"> <style>
        /* Specific styles for 404 page can go here or in main style.css */
        .not-found-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: calc(100vh - 60px); /* Full viewport height minus header */
            text-align: center;
            padding: 20px;
        }
        .not-found-container h1 {
            font-size: 3em;
            color: #0f0; /* AFAS Green */
            margin-bottom: 20px;
        }
        .not-found-container p {
            font-size: 1.2em;
            color: #ccc;
            margin-bottom: 30px;
        }
        .not-found-container a {
            padding: 10px 20px;
            background-color: #0f0;
            color: #111;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            transition: background-color 0.2s;
        }
        .not-found-container a:hover {
            background-color: #0d0;
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <div class="sidebar">
          <h2>AFAS</h2>
          <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
          <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
          <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
          <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
          <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
          <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
          <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
          <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
          <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
          <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
        </div>

        <main class="content">
            <header>
                <h1>Error</h1>
            </header>
            <div class="not-found-container">
                <h1>404</h1>
                <p>Oops! The page you are looking for could not be found.</p>
                <a href="/dashboard"><i class="fas fa-home"></i> Go to Dashboard</a>
            </div>
        </main>
    </div>
</body>
</html>



announcement-type.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Announcement Type | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type" class="active"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>
    
    <main class="content">
      <header>
        <h1>Manage Announcement Types</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Add New Announcement Type</h2>
        <form id="announcementtype-form">
            <div class="form-group">
                <label for="areaSelect">Select Area:</label>
                <select id="areaSelect"> <option value="Arrival">Arrival</option>
                  <option value="Departure">Departure</option>
                  <option value="Common">Common</option>
                </select>
            </div>

            <div class="form-group">
                <label>Select Language:</label>
                <div class="language-tabs" id="announcementTypeLanguageTabs">
                  <p class="loading-text">Loading languages...</p>
                </div>
            </div>
            
            <div class="form-group">
                <label for="newTypeName">New Announcement Type Name:</label>
                <input type="text" id="newTypeName" required placeholder="e.g., Boarding, Gate Change">
            </div>
          <button type="submit"><i class="fas fa-plus-circle"></i> Add Type</button>
        </form>
      </section>

      <section class="table-section">
        <h2>Existing Announcement Types</h2>
        <p style="margin-bottom: 15px; font-style: italic; color: #bbb;">Types are shown for the selected Area and Language above.</p>
        <div id="typesTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Type Name</th>
                  <th>Language</th>
                  <th>Area</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="typesTableBody">
                <tr><td colspan="5" class="loading-text">Select an area and language to view types.</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/announcementtype.js"></script>
</body>
</html>



dashboard.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard" class="active"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Dashboard</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="dashboard-section active-announcements-section">
        <h2>Active Announcements</h2>
        <div id="activeAnnouncementsTableContainer">
          <table id="activeAnnouncementsTable">
            <thead>
              <tr>
                <th>Sr. No.</th>
                <th>Name</th>
                <th>Type</th>
                <th>Flight</th>
                <th>Time</th>
                <th>Duration</th>
                <th>Frequency (Playback)</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="activeAnnouncementsTableBody">
              <tr>
                <td colspan="8" class="loading-text">Loading announcements...</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="pagination-controls" id="announcementsPagination">
          <button id="prevPageButton" disabled>&lt; Prev</button>
          <span id="currentPageInfo">Page 1</span>
          <button id="nextPageButton" disabled>Next &gt;</button>
        </div>
      </section>

      <section class="dashboard-summary-grid">
        <div class="summary-box" id="settingsPreviewBox">
          <h3>Settings-Preview (Global)</h3>
          <ul id="settingsPreviewList">
            <li>Loading global settings...</li>
          </ul>
        </div>

        <div class="summary-box" id="announcementSummaryBox">
          <h3>Announcement-Summary</h3>
          <p>Total Flights Today: <span id="totalFlightsToday">--</span></p>
          <p>Announcements Done Today: <span id="announcementsDoneToday">--</span></p>
          <p>Pending Announcements (Overall): <span id="pendingAnnouncements">--</span></p>
        </div>

        <div class="summary-box" id="uploadedAudiosBox">
          <h3>Uploaded Audios</h3>
          <ul id="uploadedAudiosList">
            <li>Loading audio counts...</li>
          </ul>
          <div class="pagination-controls summary-pagination" id="uploadedAudiosPagination" style="display: none;">
            <button id="prevAudiosPageBtn" class="summary-page-btn">&lt;</button>
            <span id="audiosPageInfo" class="summary-page-info">Page 1 of 1</span>
            <button id="nextAudiosPageBtn" class="summary-page-btn">&gt;</button>
          </div>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/dashboard.js"></script>
</body>
</html>


flight-settings.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flight Settings | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Flight Specific Settings for <span id="flightNumberDisplay">...</span></h1>
        <a href="/dashboard" class="back-to-dashboard-btn"><i class="fas fa-arrow-left"></i> Dashboard</a>
      </header>

      <section class="settings-section">
        <h2>Configure Announcement Settings for this Flight</h2>
        <form id="flightSettingsForm">
          <div class="form-group">
            <label>Base Languages (Enable/Disable for this flight):</label>
            <div class="language-checkboxes">
                <label title="Enable/Disable English for this flight">
                    <input type="checkbox" id="flight_lang_english" data-lang-id="english" data-lang-name="English"> English
                </label>
                <label title="Enable/Disable Hindi for this flight">
                    <input type="checkbox" id="flight_lang_hindi" data-lang-id="hindi" data-lang-name="Hindi"> Hindi
                </label>
            </div>
          </div>

          <div class="form-group">
            <label>Global Regional Language: <span id="globalRegionalLanguageNameDisplay" style="font-weight:normal;">(Loading...)</span></label>
            <div class="language-checkboxes">
                <label title="Use the Global Regional Language for this flight. This option is only available if a regional language is set globally.">
                    <input type="checkbox" id="flight_lang_regional_active" data-lang-id="regional_active_for_flight"> Enable Global Regional
                </label>
            </div>
          </div>
          
          <div class="form-group">
            <label for="fourthLanguageSelect">Select 4th Language (Optional):</label>
            <div style="display: flex; align-items: center; gap: 10px;">
                <select id="fourthLanguageSelect" style="flex-grow: 1;">
                  <option value="">-- None --</option>
                  </select>
                <label title="Enable/Disable the selected 4th language for this flight" class="inline-checkbox-label">
                    <input type="checkbox" id="flight_lang_fourth_active"> Enable 4th
                </label>
            </div>
          </div>

          <div class="form-group">
            <label>Language Order (Drag to reorder active languages for this flight, max 4):</label>
            <ul id="flightLanguageOrderList" class="draggable-list">
              </ul>
            <small>Only enabled languages will appear here and be used in the announcement for this flight.</small>
          </div>

          <div class="form-group">
            <label for="flight_frequency">Frequency (Repetitions, 1–5):</label>
            <input type="number" id="flight_frequency" min="1" max="5" value="1" required>
          </div>

          <div class="form-group">
            <label for="flight_audioLag">Audio Lag (Minutes between repetitions, 1–10):</label>
            <select id="flight_audioLag" required>
              </select>
          </div>
          
          <p id="flightLoadingMessage" style="display:none; text-align: center; padding: 10px;">Loading settings...</p>
          <p id="flightErrorMessage" style="color:red; display:none; text-align: center; padding: 10px;"></p>

          <button type="submit" id="saveFlightSettingsBtn"><i class="fas fa-save"></i> Save Flight Settings</button>
        </form>
      </section>
    </main>
  </div>
  <script src="../js/base.js"></script>
  <script src="../js/flight-settings.js"></script>
</body>
</html>




logs.html-
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>System Logs | AFAS</title>
      <link rel="stylesheet" href="../css/style.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    </head>
    <body>
      <div class="wrapper">
        <div class="sidebar">
          <h2>AFAS</h2>
          <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
          <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
          <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
          <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
          <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
          <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
          <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
          <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
          <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
          <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
          <a href="/logs" class="active"><i class="fas fa-history fa-fw"></i> System Logs</a> </div>

        <main class="content">
          <header>
            <h1>System Logs</h1>
            <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
          </header>

          <section class="filters-section form-section" style="margin-bottom: 20px;">
            <h2>Filter Logs</h2>
            <form id="logFiltersForm" class="log-filters">
              <div class="filter-group">
                <label for="logTypeFilter">Log Type:</label>
                <select id="logTypeFilter">
                  <option value="">All Types</option>
                  <option value="ANNOUNCEMENT_PLAYED">Announcement Played</option>
                  <option value="AUDIO_GENERATED">Audio Generated</option>
                  <option value="AUDIO_DELETED">Audio Deleted</option>
                  <option value="FLIGHT_UPDATE">FIDS Flight Update</option>
                  <option value="FLIGHT_ADDED_TO_PLAYLIST">Flight Added (FIDS)</option>
                  <option value="TTS_AUDIO_GENERATED">TTS Audio Generated</option>
                  <option value="ERROR">Error</option>
                  </select>
              </div>
              <div class="filter-group">
                <label for="serviceNameFilter">Service Name:</label>
                <select id="serviceNameFilter">
                  <option value="">All Services</option>
                  <option value="SchedulerService">Scheduler Service</option>
                  <option value="AudioProcessingService">Audio Processing</option>
                  <option value="FIDSIntegrationService">FIDS Integration</option>
                  <option value="TTSService">TTS Service</option>
                  <option value="UploadService">Upload Service</option>
                  <option value="SettingsService">Settings Service</option>
                  </select>
              </div>
              <div class="filter-group">
                <label for="flightNumberFilter">Flight Number:</label>
                <input type="text" id="flightNumberFilter" placeholder="e.g., AI101">
              </div>
              <div class="filter-group">
                <label for="startDateFilter">Start Date:</label>
                <input type="date" id="startDateFilter">
              </div>
              <div class="filter-group">
                <label for="endDateFilter">End Date:</label>
                <input type="date" id="endDateFilter">
              </div>
              <div class="filter-group">
                <button type="button" id="applyFiltersBtn"><i class="fas fa-filter"></i> Apply Filters</button>
                <button type="button" id="resetFiltersBtn" class="secondary-action-btn"><i class="fas fa-undo"></i> Reset</button>
              </div>
            </form>
          </section>

          <section class="table-section">
            <h2>Log Entries</h2>
            <div id="logsTableContainer">
              <table id="logsTable">
                <thead>
                  <tr>
                    <th>Timestamp</th>
                    <th>Service</th>
                    <th>Type</th>
                    <th>Flight No.</th>
                    <th>Language</th>
                    <th>Message</th>
                    <th>Details</th>
                  </tr>
                </thead>
                <tbody id="logsTableBody">
                  <tr><td colspan="7" class="loading-text">Loading logs...</td></tr>
                </tbody>
              </table>
            </div>
            <div class="pagination-controls" id="logsPagination" style="display: none;">
              <button id="prevLogsPageBtn">&lt; Prev</button>
              <span id="logsPageInfo">Page 1 of 1</span>
              <button id="nextLogsPageBtn">Next &gt;</button>
            </div>
          </section>
        </main>
      </div>

      <div id="logDetailsModal" class="modal" style="display:none;">
        <div class="modal-content">
          <span class="close-modal-btn" onclick="closeLogDetailsModal()">&times;</span>
          <h2>Log Details</h2>
          <pre id="logDetailsJson"></pre>
        </div>
      </div>

      <script src="../js/base.js"></script>
      <script src="../js/logs.js"></script>
    </body>
    </html>
    



permissions.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Permissions | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions" class="active"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content"> <header> <h1>Manage User Permissions</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Assign Page Permission</h2>
        <form id="permForm">
          <div class="form-group">
            <label for="permUserId">User:</label>
            <select id="permUserId" required>
                <option value="">-- Select User --</option>
                </select>
          </div>
          <div class="form-group">
            <label for="permPage">Page:</label>
            <select id="permPage" required>
              <option value="">-- Select Page --</option>
              <option value="dashboard">Dashboard</option>
              <option value="upload">Upload Audio</option>
              <option value="announcement-type">Announcement Type</option>
              <option value="sequence">Sequence</option>
              <option value="scheduler">Scheduler</option>
              <option value="zones">Zones</option>
              <option value="settings">Global Settings</option>
              <option value="flight-settings">Flight Settings (Access)</option>
              <option value="tts-utility">TTS Utility</option>
              <option value="users">User Management</option>
              <option value="permissions">Permission Management</option>
            </select>
          </div>
          <button type="submit"><i class="fas fa-check-circle"></i> Assign Permission</button>
        </form>
      </section>

      <section class="table-section">
        <h2>Current Permissions</h2>
        <div id="permTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>User Name</th>
                  <th>User Email</th>
                  <th>Page Permitted</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="permTableBody">
                <tr><td colspan="5" class="loading-text">Loading permissions...</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/permissions.js"></script>
</body>
</html>




scheduler.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Scheduler | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler" class="active"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Schedule Special Audio Messages</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Create/Edit Scheduled Message</h2>
        <form id="scheduler-form">
          <input type="hidden" id="edit-id"> <div class="form-group">
            <label for="messageName">Message Name:</label>
            <input type="text" id="messageName" required placeholder="e.g., Weekly Maintenance Reminder">
          </div>
          <div class="form-group">
            <label for="messageLanguage">Language:</label>
            <select id="messageLanguage" required>
              <option value="">-- Select Language --</option>
              </select>
          </div>
          <div class="form-group">
            <label for="audioFileMessage">Audio File (from Uploaded Special Messages):</label>
            <select id="audioFileMessage" required>
                <option value="">-- Select Audio File --</option>
                </select>
            <small>Upload special messages via the "Upload Audio" page.</small>
          </div>
          <div class="form-group">
            <label for="transcriptionMessage">Transcription (Auto-filled from selected audio):</label>
            <input type="text" id="transcriptionMessage" readonly placeholder="Transcription of selected audio...">
          </div>
          <div class="form-group">
            <label for="startDate">Start Date:</label>
            <input type="date" id="startDate" required>
          </div>
          <div class="form-group">
            <label for="endDate">End Date:</label>
            <input type="date" id="endDate" required>
          </div>
          <div class="form-group">
            <label>Timings (HH:MM format, add multiple if needed):</label>
            <div id="timing-container">
              <input type="time" class="timing-field" required>
            </div>
            <button type="button" id="add-timing-btn" class="secondary-action-btn"><i class="fas fa-plus"></i> Add Time</button>
          </div>
          <div class="form-group">
            <label for="frequencyDays">Frequency (Select days of the week):</label>
            <select id="frequencyDays" multiple required>
              <option value="Monday">Monday</option>
              <option value="Tuesday">Tuesday</option>
              <option value="Wednesday">Wednesday</option>
              <option value="Thursday">Thursday</option>
              <option value="Friday">Friday</option>
              <option value="Saturday">Saturday</option>
              <option value="Sunday">Sunday</option>
            </select>
            <small>Hold Ctrl/Cmd to select multiple days.</small>
          </div>
          <button type="submit" id="scheduleSubmitBtn"><i class="fas fa-calendar-check"></i> Schedule Message</button>
        </form>
      </section>

      <section class="table-section">
        <h2>Currently Scheduled Messages</h2>
        <input type="text" id="search-box" placeholder="Search scheduled messages by name...">
        <div id="scheduleTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Name</th>
                  <th>Language</th>
                  <th>Audio File</th>
                  <th>Timings</th>
                  <th>Date Range</th>
                  <th>Frequency (Days)</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="schedule-table-body">
                <tr><td colspan="8" class="loading-text">Loading scheduled messages...</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/scheduler.js"></script>
</body>
</html>




sequence.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sequence Manager | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence" class="active"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Manage Script Sequences</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Create/Edit Script Sequence</h2>
        <form id="scriptmanager-form">
          <input type="hidden" id="script-id"> <div class="form-group">
                <label for="areaSequenceSelect">Select Area:</label>
                <select id="areaSequenceSelect"> <option value="Arrival">Arrival</option>
                  <option value="Departure">Departure</option>
                  <option value="Common">Common</option>
                </select>
            </div>
            <div class="form-group">
                <label>Select Language:</label>
                <div class="language-tabs" id="sequenceLanguageTabs">
                  <p class="loading-text">Loading languages...</p>
                </div>
            </div>
            <div class="form-group">
                <label for="announcementTypeSelect">Announcement Type:</label>
                <select id="announcementTypeSelect" required>
                  <option value="">-- Select Type --</option>
                  </select>
            </div>
            <div class="form-group">
                <label for="sequenceInput">Sequence (comma-separated audio filenames or *placeholders*):</label>
                <input type="text" id="sequenceInput" required placeholder="e.g., STD1, *IATAAIR*, *IATAFLIGHTNO*, STD2, *DESTCITY*, STD3, *GATENO*">
                <small>Example placeholders: *IATAAIR*, *IATAFLIGHTNO*, *DESTCITY*, *GATENO*, *STD*, *ETD*</small>
            </div>
            <div class="form-group">
                <label for="transcriptionOutput">Generated Transcription (Preview):</label>
                <textarea id="transcriptionOutput" rows="3" readonly placeholder="Transcription will appear here..."></textarea>
                <button type="button" id="getTranscriptionBtn" style="margin-top: 5px; width: auto; padding: 6px 10px; font-size: 0.9em;"><i class="fas fa-comment-dots"></i> Get Transcription</button>
            </div>
          <button type="submit" id="addScriptBtn"><i class="fas fa-plus-circle"></i> Add Sequence</button>
        </form>
      </section>

      <section class="table-section">
        <h2>Existing Script Sequences</h2>
        <p style="margin-bottom: 15px; font-style: italic; color: #bbb;">Sequences are shown for the selected Area and Language above.</p>
        <div id="scriptsTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Announcement Type</th>
                  <th>Sequence</th>
                  <th>Transcription</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="scriptsTableBody">
                <tr><td colspan="5" class="loading-text">Select an area and language to view sequences.</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/sequence.js"></script>
</body>
</html>




settings.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Global Settings | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings" class="active"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Global Application Settings</h1>
         <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="settings-section">
        <h2>Configure Global Announcement Settings</h2>
        <form id="globalSettingsForm">
          <div class="form-group">
            <label>Base Languages:</label>
            <div class="language-checkboxes">
                <label title="Enable/Disable English globally">
                    <input type="checkbox" id="lang_english" data-lang-id="english" data-lang-name="English"> English
                </label>
                <label title="Enable/Disable Hindi globally">
                    <input type="checkbox" id="lang_hindi" data-lang-id="hindi" data-lang-name="Hindi"> Hindi
                </label>
            </div>
          </div>

          <div class="form-group">
            <label for="regionalLanguageSelect">Select Regional Language:</label>
            <div style="display: flex; align-items: center; gap: 10px;">
                <select id="regionalLanguageSelect" style="flex-grow: 1;">
                  <option value="">-- None --</option>
                  </select>
                <label title="Enable/Disable the selected regional language globally" class="inline-checkbox-label">
                    <input type="checkbox" id="lang_regional_active"> Enable
                </label>
            </div>
          </div>

          <div class="form-group">
            <label>Language Order (Drag to reorder active languages):</label>
            <ul id="languageOrderList" class="draggable-list">
              </ul>
            <small>Only enabled languages (English, Hindi, and selected/enabled Regional) will appear here and be used in announcements.</small>
          </div>

          <div class="form-group">
            <label for="frequency">Frequency (Repetitions, 1–5):</label>
            <input type="number" id="frequency" min="1" max="5" value="1" required>
          </div>

          <div class="form-group">
            <label for="audioLag">Audio Lag (Minutes between repetitions, 1–10):</label>
            <select id="audioLag" required>
              </select>
          </div>

          <div class="form-group">
            <label for="advanceTime">Advance Time (Minutes before ETD/ETA):</label>
            <input type="number" id="advanceTime" min="1" value="15" required>
          </div>

          <p id="loadingMessage" style="display:none; text-align: center; padding: 10px;">Loading settings...</p>
          <p id="errorMessage" style="color:red; display:none; text-align: center; padding: 10px;"></p>

          <button type="submit" id="saveGlobalSettingsBtn"><i class="fas fa-save"></i> Save Global Settings</button>
        </form>
      </section>
    </main>
  </div>
  <script src="../js/base.js"></script>
  <script src="../js/settings.js"></script>
</body>
</html>





tts-utility.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TTS Utility | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility" class="active"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Text-to-Speech Utility</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Generate Speech from Text</h2>
        <form id="ttsAppForm">
          <div class="form-group">
            <label for="textToSynthesizeApp">Text to Synthesize:</label>
            <textarea id="textToSynthesizeApp" rows="5" required placeholder="Enter text here..."></textarea>
          </div>
          <div class="form-group">
            <label for="voiceIdApp">Select Voice (AWS Polly):</label>
            <select id="voiceIdApp">
              <option value="Joanna">Joanna (US English, Female, Neural)</option>
              <option value="Kajal">Kajal (Indian English, Female, Neural)</option>
              <option value="Aditi">Aditi (Indian English, Female, Neural)</option>
              <option value="Matthew">Matthew (US English, Male, Neural)</option>
              <option value="Salli">Salli (US English, Female, Neural)</option>
              <option value="Stephen">Stephen (US English, Male, Neural)</option>
              <option value="Hiujin">Hiujin (Korean, Female, Neural)</option>
              <option value="Zeina">Zeina (Arabic, Female, Neural)</option>
              <option value="Zhiyu">Zhiyu (Chinese Mandarin, Female, Neural)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="engineApp">Select Engine:</label>
            <select id="engineApp">
              <option value="neural">Neural (Recommended)</option>
              <option value="standard">Standard</option>
            </select>
          </div>
          <button type="submit" id="synthesizeBtnApp"><i class="fas fa-play-circle"></i> Synthesize & Play</button>
        </form>

        <div id="responseAreaApp" style="margin-top: 20px;">
          <p id="statusMessageApp" class="info-message">Enter text and click synthesize.</p>
          <div id="audioPlayerContainerApp"></div>
        </div>
      </section>
      
      <!-- <section class="info-section">
          <h3>How this works:</h3>
          <p>This utility uses the dedicated AFAS TTS Service (powered by AWS Polly) to convert your text into speech. The generated audio file is temporarily stored by the TTS service and played back here using the URL it provides.</p>
          <p>The TTS Service API endpoint used is: <code>POST /api/tts/synthesize</code> on the TTS service (e.g., http://localhost:4020/api/tts/synthesize).</p>
      </section> -->

    </main>
  </div>
  <script src="../js/base.js"></script>
  <script src="../js/tts-utility.js"></script>
</body>
</html>







upload.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upload Audio | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload" class="active"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <div class="content">
      <header>
        <h1>Upload Audio Files</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <div class="language-tabs">
        <p class="loading-text" id="languageTabsLoading">Loading languages...</p>
      </div>

      <section class="form-section">
        <h2>New Audio Upload</h2>
        <form id="upload-form">
          <div class="form-group">
            <label for="audioType">Audio Type:</label>
            <select id="audioType" required>
              <option value="specialmessage">Special Message</option>
              <option value="std">Standard Phrase</option>
              <option value="number">Number</option>
              <option value="city">City</option>
              <option value="airline">Airline</option>
            </select>
          </div>

          <div class="form-group">
            <label for="audioFile">Audio File (.mp3, .wav):</label>
            <input type="file" id="audioFile" accept=".mp3,.wav" required>
          </div>

          <div class="form-group">
            <label for="transcription">Transcription:</label>
            <input type="text" id="transcription" placeholder="Enter transcribed text of the audio">
          </div>

          <div class="form-group">
            <label for="remarks">Remarks (Optional):</label>
            <input type="text" id="remarks" placeholder="Any notes or remarks about this audio">
          </div>

          <button type="submit" id="uploadButton"><i class="fas fa-cloud-upload-alt"></i> Upload Audio</button>
          <p id="uploadStatus" style="margin-top: 10px; display: none;"></p>
        </form>
      </section>

      <section class="table-section">
        <h2>Uploaded Audio Library</h2>
        <input type="text" id="searchBox" placeholder="Search audio by filename, type, transcription, or remarks...">

        <div id="audioTableContainer">
            <table id="audio-table">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Filename</th>
                  <th>Type</th>
                  <th>Transcription</th>
                  <th>Remarks</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="audio-table-body">
                <tr><td colspan="6" class="loading-text">Loading audio files...</td></tr>
              </tbody>
            </table>
        </div>

        <div class="pagination-controls" id="audioTablePagination" style="display: none;">
          <button id="prevPageBtn"><i class="fas fa-chevron-left"></i> Prev</button>
          <span id="pageInfo">Page 1 of 1</span>
          <button id="nextPageBtn">Next <i class="fas fa-chevron-right"></i></button>
        </div>
      </section>
    </div>
  </div>
  <script src="../js/base.js"></script>
  <script src="../js/upload.js"></script>
</body>
</html>




users.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users" class="active"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>
  
    <main class="content"> <header> <h1>User Management</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Create New User</h2>
        <form id="userForm">
          <div class="form-group">
            <label for="userName">Name:</label>
            <input type="text" id="userName" required>
          </div>
          <div class="form-group">
            <label for="userEmail">Email:</label>
            <input type="email" id="userEmail" required>
          </div>
          <div class="form-group">
            <label for="userPassword">Password:</label>
            <input type="password" id="userPassword" required autocomplete="new-password">
          </div>
          <div class="form-group">
            <label for="userRole">Role:</label>
            <select id="userRole" required>
              <option value="user">User</option>
              <option value="admin">Admin</option>
              <option value="viewer">Viewer</option>
            </select>
          </div>
          <button type="submit"><i class="fas fa-user-plus"></i> Create User</button>
        </form>
      </section>

      <section class="table-section">
        <h2>All Users</h2>
        <div id="usersTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="usersTableBody">
                <tr><td colspan="5" class="loading-text">Loading users...</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>
  
  <script src="../js/base.js"></script>
  <script src="../js/users.js"></script>
</body>
</html>




zones.html-
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Zone Management | AFAS</title>
  <link rel="stylesheet" href="../css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
  <div class="wrapper">
    <div class="sidebar">
      <h2>AFAS</h2>
      <a href="/dashboard"><i class="fas fa-tachometer-alt fa-fw"></i> Dashboard</a>
      <a href="/upload"><i class="fas fa-upload fa-fw"></i> Upload Audio</a>
      <a href="/announcement-type"><i class="fas fa-bullhorn fa-fw"></i> Announcement Type</a>
      <a href="/sequence"><i class="fas fa-list-ol fa-fw"></i> Sequence</a>
      <a href="/scheduler"><i class="fas fa-calendar-alt fa-fw"></i> Scheduler</a>
      <a href="/zones" class="active"><i class="fas fa-map-marker-alt fa-fw"></i> Zones</a>
      <a href="/users"><i class="fas fa-users fa-fw"></i> Users</a>
      <a href="/permissions"><i class="fas fa-user-shield fa-fw"></i> Permissions</a>
      <a href="/settings"><i class="fas fa-cog fa-fw"></i> Global Settings</a>
      <a href="/tts-utility"><i class="fas fa-microphone-lines fa-fw"></i> TTS Utility</a>
      <a href="/logs"><i class="fas fa-history fa-fw"></i> System Logs</a>
    </div>

    <main class="content">
      <header>
        <h1>Manage Airport Zones & Announcement Mappings</h1>
        <button class="logout-btn" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </header>

      <section class="form-section">
        <h2>Add New Zone Mapping</h2>
        <form id="zoneMappingForm">
            <div class="form-group">
                <label for="zoneNameInput">Zone Name:</label>
                <input type="text" id="zoneNameInput" placeholder="e.g., Zone A, Gate Area 1-5, Domestic Arrivals" required>
            </div>
            <div class="form-group">
                <label for="announcementTypeZoneDropdown">Select Announcement Type to Map:</label>
                <select id="announcementTypeZoneDropdown" required>
                    <option value="">-- Select Announcement Type --</option>
                    </select>
                <small>These are general announcement types. Specific flight announcements are usually zone-aware via gate info.</small>
            </div>
          <button type="button" id="addZoneMappingBtn"><i class="fas fa-plus-circle"></i> Add Mapping</button>
        </form>
      </section>

      <section class="table-section">
        <h2>Current Zone Mappings</h2>
        <input type="text" id="searchBox" placeholder="Search mappings by zone or announcement type...">
        <div id="zoneTableContainer">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Zone Name</th>
                  <th>Mapped Announcement Type</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="zoneTableBody">
                <tr><td colspan="4" class="loading-text">Loading zone mappings...</td></tr>
              </tbody>
            </table>
        </div>
      </section>
    </main>
  </div>

  <script src="../js/base.js"></script>
  <script src="../js/zones.js"></script>
</body>
</html>



announcementtype.js-
// frontend-service/public/js/announcementtype.js
document.addEventListener('DOMContentLoaded', () => {
    const areaSelectElement = document.getElementById("areaSelect");
    const announcementTypeForm = document.getElementById("announcementtype-form");
    const newTypeNameInput = document.getElementById("newTypeName");
    const typesTableBody = document.getElementById("typesTableBody");
    const languageTabsContainer = document.getElementById("announcementTypeLanguageTabs");

    let currentSelectedLanguage = null; // To keep track of the active language

    // Use the global populateLanguageTabs function
    if (languageTabsContainer && window.populateLanguageTabs) {
        window.populateLanguageTabs(languageTabsContainer, (selectedLanguage) => {
            currentSelectedLanguage = selectedLanguage;
            if (selectedLanguage) {
                loadAnnouncementTypes(selectedLanguage);
            } else {
                if (typesTableBody) showInfoMessage(typesTableBody, "Please select a language to view types.", 5);
            }
        }, "Loading languages for tabs...");
    } else {
        console.error("Language tabs container or populateLanguageTabs function not found.");
    }

    async function loadAnnouncementTypes(language) {
        if (!areaSelectElement) {
            console.error("Area select element 'areaSelect' not found.");
            if (typesTableBody) showErrorMessage(typesTableBody, "Configuration error: Area selector missing.", 5);
            return;
        }
        const area = areaSelectElement.value;
        currentSelectedLanguage = language; // Update current language

        if (!language || !area) {
            if (typesTableBody) showInfoMessage(typesTableBody, "Please select an area and language.", 5);
            return;
        }
        if (!typesTableBody) { console.error("Table body 'typesTableBody' not found."); return; }
        
        showLoadingMessage(typesTableBody, `Loading types for ${language} in ${area}...`, 5);

        try {
            const res = await fetch(`http://localhost:4006/announcementtype/types?language=${encodeURIComponent(language)}&area=${encodeURIComponent(area)}`);
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({ message: `HTTP error! Status: ${res.status}` }));
                throw new Error(errorData.message || `Failed to fetch announcement types.`);
            }
            const types = await res.json();
            typesTableBody.innerHTML = "";

            if (types.length === 0) {
                showInfoMessage(typesTableBody, `No announcement types found for ${language} in ${area}.`, 5);
                return;
            }

            types.forEach((typeData, i) => {
                const typeName = typeof typeData === 'string' ? typeData : typeData.type;
                if (typeName === undefined) { console.warn("Undefined type name from API:", typeData); return; }
                
                const row = typesTableBody.insertRow();
                row.insertCell().textContent = i + 1;
                row.insertCell().textContent = typeName;
                row.insertCell().textContent = language.charAt(0).toUpperCase() + language.slice(1);
                row.insertCell().textContent = area.charAt(0).toUpperCase() + area.slice(1);
                
                const actionCell = row.insertCell();
                const deleteButton = document.createElement("button");
                deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                deleteButton.classList.add("action-btn", "delete-btn");
                deleteButton.title = `Delete type: ${typeName}`;
                deleteButton.addEventListener('click', () => deleteType(typeName, language, area)); // Use event listener
                actionCell.appendChild(deleteButton);
            });
        } catch (err) {
            console.error("Error loading announcement types:", err);
            if (typesTableBody) showErrorMessage(typesTableBody, "Error loading types. Check console.", 5);
        }
    }

    if (announcementTypeForm) {
        announcementTypeForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            if (!newTypeNameInput || !areaSelectElement || !currentSelectedLanguage) {
                alert("Essential form elements are missing or no language selected. Cannot add type.");
                return;
            }
            const type = newTypeNameInput.value.trim();
            const area = areaSelectElement.value;
            if (!type) { alert("New Announcement Type Name is required."); newTypeNameInput.focus(); return; }
            if (!area) { alert("Area selection is required."); areaSelectElement.focus(); return; }

            try {
                const res = await fetch("http://localhost:4006/announcementtype/types", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ type, language: currentSelectedLanguage, area })
                });
                if (res.ok) {
                    alert("Announcement type added successfully!");
                    newTypeNameInput.value = "";
                    loadAnnouncementTypes(currentSelectedLanguage);
                } else {
                    const errorData = await res.json().catch(() => ({ message: "Failed to add type." }));
                    alert(`Failed to add type: ${errorData.message || res.statusText}`);
                }
            } catch (err) {
                console.error("Failed to add announcement type:", err);
                alert("An error occurred. Check console.");
            }
        });
    }

    async function deleteType(typeName, language, area) {
        if (!confirm(`Delete type "${typeName}" for ${language} in ${area}?`)) return;
        try {
            const res = await fetch(`http://localhost:4006/announcementtype/types/${encodeURIComponent(typeName)}?language=${encodeURIComponent(language)}&area=${encodeURIComponent(area)}`, {
                method: "DELETE"
            });
            if (res.ok) {
                alert("Type deleted successfully.");
                loadAnnouncementTypes(language);
            } else {
                const errorData = await res.json().catch(() => ({ message: "Failed to delete." }));
                alert(`Failed to delete type: ${errorData.message || res.statusText}`);
            }
        } catch (err) {
            console.error("Failed to delete type:", err);
            alert("An error occurred. Check console.");
        }
    }
    // window.deleteType = deleteType; // No longer needed if using addEventListener

    if (areaSelectElement) {
        areaSelectElement.addEventListener("change", () => {
            if (currentSelectedLanguage) {
                loadAnnouncementTypes(currentSelectedLanguage);
            } else {
                if (typesTableBody) showInfoMessage(typesTableBody, "Please select a language tab first.", 5);
            }
        });
    }
    // Initial load is handled by the populateLanguageTabs callback
});





base.js-
// frontend-service/public/js/base.js

/**
 * Basic logout functionality.
 * In a real application, this would clear tokens/session and redirect to a login page.
 */
function logout() {
  console.log("Logout button clicked. Implement actual logout logic.");
  // Example: Clear local storage, session storage, cookies
  // localStorage.removeItem('authToken');
  // sessionStorage.removeItem('userData');
  alert("Logout functionality placeholder. Redirecting to a hypothetical login page.");
  // window.location.href = '/login.html'; // Or your actual login page route
}

/**
 * Helper function to show a loading message.
 * @param {HTMLElement} element - The DOM element where the loading message should be shown.
 * @param {string} message - The message to display.
 */
function showLoadingMessage(element, message = "Loading...") {
  if (element) {
    element.innerHTML = `<p class="loading-text">${message}</p>`;
  }
}

/**
 * Helper function to show an error message.
 * @param {HTMLElement} element - The DOM element where the error message should be shown.
 * @param {string} message - The error message to display.
 */
function showErrorMessage(element, message = "An error occurred.") {
  if (element) {
    element.innerHTML = `<p class="error-message">${message}</p>`; // Ensure .error-message is styled
  }
}

/**
 * Helper function to show an informational message.
 * @param {HTMLElement} element - The DOM element where the info message should be shown.
 * @param {string} message - The message to display.
 */
function showInfoMessage(element, message) {
  if (element) {
    element.innerHTML = `<p class="info-message">${message}</p>`; // Ensure .info-message is styled
  }
}

/**
 * Common function to fetch languages from the Upload Service and populate tab-like buttons.
 * @param {HTMLElement} tabsContainerElement - The container element for the language tabs.
 * @param {function} onTabClickCallback - Callback function to execute when a language tab is clicked. It receives the selected language string.
 * @param {string} initialLoadingText - Text to show while languages are loading.
 */
async function populateLanguageTabs(tabsContainerElement, onTabClickCallback, initialLoadingText = "Loading languages...") {
    if (!tabsContainerElement) {
        console.error("Language tabs container not provided or not found.");
        return;
    }
    showLoadingMessage(tabsContainerElement, initialLoadingText);

    try {
        const response = await fetch("http://localhost:4003/languages"); // Centralized languages endpoint
        if (!response.ok) {
            throw new Error(`Failed to fetch languages: ${response.status} ${response.statusText}`);
        }
        const languages = await response.json();

        tabsContainerElement.innerHTML = ""; // Clear loading message

        if (!languages || languages.length === 0) {
            showInfoMessage(tabsContainerElement, "No languages found. Configure languages or upload audio to create them.");
            // Optionally call the callback with null or an empty state
            if (typeof onTabClickCallback === 'function') {
                onTabClickCallback(null);
            }
            return;
        }

        languages.forEach((lang, index) => {
            const button = document.createElement("button");
            button.textContent = lang.charAt(0).toUpperCase() + lang.slice(1);
            button.classList.add("lang-btn"); // Consistent class for all language buttons
            if (index === 0) {
                button.classList.add("active");
            }
            button.setAttribute("data-lang", lang);

            button.addEventListener("click", () => {
                tabsContainerElement.querySelectorAll(".lang-btn.active").forEach(b => b.classList.remove("active"));
                button.classList.add("active");
                if (typeof onTabClickCallback === 'function') {
                    onTabClickCallback(lang);
                }
            });
            tabsContainerElement.appendChild(button);
        });

        // Trigger callback for the initially active language
        if (languages.length > 0 && typeof onTabClickCallback === 'function') {
            onTabClickCallback(languages[0]);
        }

    } catch (err) {
        console.error("Error populating language tabs:", err);
        showErrorMessage(tabsContainerElement, "Could not load languages.");
         if (typeof onTabClickCallback === 'function') {
            onTabClickCallback(null); // Indicate failure or empty state
        }
    }
}

// Make functions available globally if needed, or use ES6 modules if your setup supports it.
// For simplicity in this multi-file context without a bundler, attaching to window.
window.logout = logout;
window.populateLanguageTabs = populateLanguageTabs;
window.showLoadingMessage = showLoadingMessage;
window.showErrorMessage = showErrorMessage;
window.showInfoMessage = showInfoMessage;






dashboard.js-
// frontend-service/public/js/dashboard.js

document.addEventListener('DOMContentLoaded', async () => {
    // --- Variables for Active Announcements pagination ---
    let currentActivePage = 1;
    const itemsPerActivePage = 5; // Number of active announcements per page
    let activeAnnouncementsData = [];
    let globalSettings = {}; // To store global settings like playback frequency

    // --- Variables for Uploaded Audios pagination ---
    let currentAudiosPage = 1;
    const itemsPerAudiosPage = 4; // Show 4 languages per page in the summary
    let allUploadedAudioCounts = []; // Stores { lang: 'Name', count: X } objects

    // DOM Elements for Active Announcements
    const activeAnnouncementsTableBody = document.getElementById("activeAnnouncementsTableBody");
    const announcementsPaginationDiv = document.getElementById("announcementsPagination");
    const prevActivePageButton = document.getElementById("prevPageButton");
    const nextActivePageButton = document.getElementById("nextPageButton");
    const currentActivePageInfo = document.getElementById("currentPageInfo");
    
    // DOM Elements for Uploaded Audios
    const uploadedAudiosListElement = document.getElementById("uploadedAudiosList");
    const uploadedAudiosPaginationDiv = document.getElementById("uploadedAudiosPagination");
    const prevAudiosPageBtn = document.getElementById("prevAudiosPageBtn");
    const nextAudiosPageBtn = document.getElementById("nextAudiosPageBtn");
    const audiosPageInfo = document.getElementById("audiosPageInfo");

    // DOM Elements for Summaries
    const settingsPreviewListElement = document.getElementById("settingsPreviewList");
    const totalFlightsEl = document.getElementById("totalFlightsToday");
    const announcementsDoneEl = document.getElementById("announcementsDoneToday");
    const pendingAnnouncementsEl = document.getElementById("pendingAnnouncements");


    async function fetchGlobalSettings() {
        try {
            const response = await fetch("http://localhost:4010/settings");
            if (!response.ok) {
                console.error("Failed to fetch global settings:", response.status);
                return { frequency: 1, languages: {}, language_order: [], audio_lag: 0, advance_minutes: 0 };
            }
            globalSettings = await response.json();
            return globalSettings;
        } catch (error) {
            console.error("Error fetching global settings:", error);
            return { frequency: 1, languages: {}, language_order: [], audio_lag: 0, advance_minutes: 0 };
        }
    }

    async function loadActiveAnnouncements() {
        try {
            // Ensure global settings are loaded as they might be used for display (e.g., frequency)
            if (Object.keys(globalSettings).length === 0) {
                await fetchGlobalSettings();
            }

            const response = await fetch("http://localhost:4005/playlist/active");
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            activeAnnouncementsData = await response.json();
            renderActiveAnnouncementsTable();
        } catch (error) {
            console.error("Error fetching active announcements:", error);
            if (activeAnnouncementsTableBody) {
                const colspan = document.getElementById("activeAnnouncementsTable")?.querySelector("thead tr")?.cells.length || 8;
                activeAnnouncementsTableBody.innerHTML = `<tr><td colspan="${colspan}" class="error-message">Error loading announcements.</td></tr>`;
            }
            updateActiveAnnouncementsPaginationButtons();
        }
    }

    function renderActiveAnnouncementsTable() {
        if (!activeAnnouncementsTableBody) return;
        activeAnnouncementsTableBody.innerHTML = "";

        const paginatedItems = activeAnnouncementsData.slice(
            (currentActivePage - 1) * itemsPerActivePage,
            currentActivePage * itemsPerActivePage
        );
        
        const colspan = document.getElementById("activeAnnouncementsTable")?.querySelector("thead tr")?.cells.length || 8;

        if (paginatedItems.length === 0) {
            activeAnnouncementsTableBody.innerHTML = `<tr><td colspan="${colspan}" class="no-data-text">No active announcements.</td></tr>`;
            updateActiveAnnouncementsPaginationButtons();
            return;
        }

        paginatedItems.forEach((item, index) => {
            const row = activeAnnouncementsTableBody.insertRow();
            const serialNumber = (currentActivePage - 1) * itemsPerActivePage + index + 1;

            const name = item.announcement_name || "N/A";
            const type = item.status || "N/A";
            const flightNumber = item.flight_code || item.flight_number || "N/A";
            const time = item.time || "--:--";
            const duration = item.audio_duration || "--:--";
            const playbackFrequency = item.flight_specific_frequency || globalSettings.frequency || "N/A";

            row.insertCell().textContent = serialNumber;
            row.insertCell().textContent = name;
            row.insertCell().textContent = type;
            row.insertCell().textContent = flightNumber;
            row.insertCell().textContent = time;
            row.insertCell().textContent = duration;
            row.insertCell().textContent = playbackFrequency;

            const settingsCell = row.insertCell();
            const settingsButton = document.createElement("button");
            settingsButton.innerHTML = '<i class="fas fa-sliders-h"></i>';
            settingsButton.classList.add("action-btn", "settings-btn");
            settingsButton.title = `Configure settings for flight ${flightNumber}`;
            settingsButton.onclick = function() {
                const flightIdForSettings = item.flight_number || flightNumber;
                if (flightIdForSettings && flightIdForSettings !== "N/A") {
                     window.location.href = `/flight-settings?flight_number=${encodeURIComponent(flightIdForSettings)}`;
                } else {
                    alert("Flight number not available for individual settings.");
                }
            };
            settingsCell.appendChild(settingsButton);
        });
        updateActiveAnnouncementsPaginationButtons();
    }

    function updateActiveAnnouncementsPaginationButtons() {
        if (!currentActivePageInfo || !prevActivePageButton || !nextActivePageButton || !announcementsPaginationDiv) return;
        const totalPages = Math.ceil(activeAnnouncementsData.length / itemsPerActivePage);
        currentActivePageInfo.textContent = `Page ${currentActivePage} of ${totalPages > 0 ? totalPages : 1}`;
        prevActivePageButton.disabled = currentActivePage === 1;
        nextActivePageButton.disabled = currentActivePage === totalPages || totalPages === 0;
        announcementsPaginationDiv.style.display = totalPages > 1 ? "flex" : "none";
    }

    async function loadUploadedAudiosSummary() {
        if (!uploadedAudiosListElement || !uploadedAudiosPaginationDiv) return;
        showLoadingMessage(uploadedAudiosListElement, "Loading audio counts...");
        uploadedAudiosPaginationDiv.style.display = 'none';

        try {
            const langResponse = await fetch("http://localhost:4003/languages");
            if (!langResponse.ok) throw new Error(`Failed to fetch languages: ${langResponse.status}`);
            const languages = await langResponse.json();
            allUploadedAudioCounts = [];

            if (languages.length === 0) {
                showInfoMessage(uploadedAudiosListElement, "No languages configured.");
                return;
            }
            const languagesToFetch = [...new Set([...languages, 'temp'])];
            for (const lang of languagesToFetch) {
                try {
                    const audioFilesResponse = await fetch(`http://localhost:4003/upload?language=${lang}`);
                    let count = 0;
                    if (audioFilesResponse.ok) count = (await audioFilesResponse.json()).length;
                    allUploadedAudioCounts.push({ lang: lang.charAt(0).toUpperCase() + lang.slice(1), count: count });
                } catch (e) {
                    allUploadedAudioCounts.push({ lang: lang.charAt(0).toUpperCase() + lang.slice(1), count: 0 });
                }
            }
            currentAudiosPage = 1;
            renderUploadedAudiosPage();
        } catch (error) {
            console.error("Error fetching uploaded audios summary:", error);
            showErrorMessage(uploadedAudiosListElement, "Error loading audio counts.");
        }
    }

    function renderUploadedAudiosPage() {
        if (!uploadedAudiosListElement || !uploadedAudiosPaginationDiv) return;
        uploadedAudiosListElement.innerHTML = "";

        if (allUploadedAudioCounts.length === 0) {
            showInfoMessage(uploadedAudiosListElement, "No audio data available.");
            uploadedAudiosPaginationDiv.style.display = 'none';
            return;
        }
        const startIndex = (currentAudiosPage - 1) * itemsPerAudiosPage;
        const paginatedAudioCounts = allUploadedAudioCounts.slice(startIndex, startIndex + itemsPerAudiosPage);

        if (paginatedAudioCounts.length === 0 && currentAudiosPage > 1) {
            currentAudiosPage--; renderUploadedAudiosPage(); return;
        }
        if (paginatedAudioCounts.length === 0 && currentAudiosPage === 1) {
             showInfoMessage(uploadedAudiosListElement, "No audio data for this page.");
        }

        paginatedAudioCounts.forEach(item => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `<strong>${item.lang}:</strong> <span>${item.count}</span>`;
            uploadedAudiosListElement.appendChild(listItem);
        });
        updateUploadedAudiosPagination();
        uploadedAudiosPaginationDiv.style.display = allUploadedAudioCounts.length > itemsPerAudiosPage ? 'flex' : 'none';
    }

    function updateUploadedAudiosPagination() {
        if (!audiosPageInfo || !prevAudiosPageBtn || !nextAudiosPageBtn) return;
        const totalPages = Math.ceil(allUploadedAudioCounts.length / itemsPerAudiosPage);
        audiosPageInfo.textContent = `Page ${currentAudiosPage} of ${totalPages > 0 ? totalPages : 1}`;
        prevAudiosPageBtn.disabled = currentAudiosPage === 1;
        nextAudiosPageBtn.disabled = currentAudiosPage === totalPages || totalPages === 0;
    }

    async function loadSettingsPreview() {
        if (!settingsPreviewListElement) return;
        try {
            if (Object.keys(globalSettings).length === 0) await fetchGlobalSettings();
            const settings = globalSettings;
            if (!settings || Object.keys(settings).length === 0 || !settings.languages) {
                 settingsPreviewListElement.innerHTML = "<li>Could not load global settings.</li>"; return;
            }
            const enabledGlobalLangs = [];
            if(settings.languages.english) enabledGlobalLangs.push("English");
            if(settings.languages.hindi) enabledGlobalLangs.push("Hindi");
            if(settings.languages.regional_active && settings.regional_language_name) {
                enabledGlobalLangs.push(settings.regional_language_name.charAt(0).toUpperCase() + settings.regional_language_name.slice(1));
            }
            settingsPreviewListElement.innerHTML = `
                <li><strong>Languages Order:</strong> <span>${(settings.language_order || []).join(', ') || 'N/A'}</span></li>
                <li><strong>Enabled Globally:</strong> <span>${enabledGlobalLangs.join(', ') || 'None'}</span></li>
                <li><strong>Regional Config:</strong> <span>${settings.regional_language_name || 'None'} (${settings.languages?.regional_active ? 'Active' : 'Inactive'})</span></li>
                <li><strong>Repetition:</strong> <span>${settings.frequency !== undefined ? settings.frequency : 'N/A'}</span></li>
                <li><strong>Audio Lag:</strong> <span>${settings.audio_lag !== undefined ? settings.audio_lag + 's' : 'N/A'}</span></li>
                <li><strong>Advance Time:</strong> <span>${settings.advance_minutes !== undefined ? settings.advance_minutes + ' mins' : 'N/A'}</span></li>
            `;
        } catch (error) {
            console.error("Error fetching global settings preview:", error);
            settingsPreviewListElement.innerHTML = "<li>Error loading global settings.</li>";
        }
    }

    async function loadAnnouncementSummary() {
        if (!totalFlightsEl || !announcementsDoneEl || !pendingAnnouncementsEl) return;
        try {
            const pendingResponse = await fetch("http://localhost:4008/audio/active");
            if (pendingResponse.ok) {
                pendingAnnouncementsEl.textContent = (await pendingResponse.json()).length;
            } else {
                pendingAnnouncementsEl.textContent = "Error";
            }
            // Placeholders - require backend implementation
            totalFlightsEl.textContent = "N/A";
            announcementsDoneEl.textContent = "N/A";
        } catch (error) {
            if(totalFlightsEl) totalFlightsEl.textContent = "Error";
            if(announcementsDoneEl) announcementsDoneEl.textContent = "Error";
            if(pendingAnnouncementsEl) pendingAnnouncementsEl.textContent = "Error";
        }
    }

    // Initial Load
    await Promise.all([
        loadActiveAnnouncements(),
        loadAnnouncementSummary(),
        loadUploadedAudiosSummary()
    ]);
    await loadSettingsPreview();

    // Event Listeners
    if (prevActivePageButton) prevActivePageButton.addEventListener("click", () => {
        if (currentActivePage > 1) { currentActivePage--; renderActiveAnnouncementsTable(); }
    });
    if (nextActivePageButton) nextActivePageButton.addEventListener("click", () => {
        if ((currentActivePage * itemsPerActivePage) < activeAnnouncementsData.length) {
            currentActivePage++; renderActiveAnnouncementsTable();
        }
    });
    if(prevAudiosPageBtn) prevAudiosPageBtn.addEventListener("click", () => {
        if (currentAudiosPage > 1) { currentAudiosPage--; renderUploadedAudiosPage(); }
    });
    if(nextAudiosPageBtn) nextAudiosPageBtn.addEventListener("click", () => {
        if ((currentAudiosPage * itemsPerAudiosPage) < allUploadedAudioCounts.length) {
            currentAudiosPage++; renderUploadedAudiosPage();
        }
    });
});





flight-settings.js-
// frontend-service/public/js/flight-settings.js
document.addEventListener('DOMContentLoaded', async () => {
    const flightNumberDisplay = document.getElementById('flightNumberDisplay');
    const flightSettingsForm = document.getElementById('flightSettingsForm');
    const langEnglishCheckbox = document.getElementById('flight_lang_english');
    const langHindiCheckbox = document.getElementById('flight_lang_hindi');
    const globalRegionalLanguageNameDisplay = document.getElementById('globalRegionalLanguageNameDisplay');
    const langRegionalActiveCheckbox = document.getElementById('flight_lang_regional_active');
    const fourthLanguageSelect = document.getElementById('fourthLanguageSelect');
    const langFourthActiveCheckbox = document.getElementById('flight_lang_fourth_active');
    const languageOrderList = document.getElementById('flightLanguageOrderList');
    const frequencyInput = document.getElementById('flight_frequency');
    const audioLagSelect = document.getElementById('flight_audioLag'); // This will be for minutes
    const saveButton = document.getElementById('saveFlightSettingsBtn');
    const loadingMessage = document.getElementById('flightLoadingMessage');
    const errorMessage = document.getElementById('flightErrorMessage');

    let currentFlightNumber = '';
    let availableSystemLanguages = [];
    let currentGlobalSettingsForFlightPage = {}; 
    let currentFlightSpecificSettings = {}; 

    if (audioLagSelect) {
        for (let i = 1; i <= 10; i++) { // Populate with 1-10 minutes
            audioLagSelect.add(new Option(`${i} minute${i > 1 ? 's' : ''}`, i));
        }
    }

    const params = new URLSearchParams(window.location.search);
    currentFlightNumber = params.get('flight_number');
    if (flightNumberDisplay) flightNumberDisplay.textContent = currentFlightNumber || 'N/A';

    if (!currentFlightNumber) {
        showErrorOnPage("Flight number missing from URL. Cannot load or save settings.");
        if(saveButton) saveButton.disabled = true;
        return;
    }

    async function fetchAllSystemLanguages() {
        try {
            const response = await fetch('http://localhost:4003/languages');
            if (!response.ok) throw new Error('Failed to fetch system languages.');
            availableSystemLanguages = await response.json();
        } catch (err) {
            showErrorOnPage('Could not load system languages for 4th language selection.');
            console.error(err);
        }
    }
    
    function populateFourthLanguageSelect() {
        if(!fourthLanguageSelect) return;
        fourthLanguageSelect.innerHTML = '<option value="">-- None --</option>';
        const globalRegNameLower = currentGlobalSettingsForFlightPage.regional_language_name?.toLowerCase();
        availableSystemLanguages.forEach(lang => {
            const langLower = lang.toLowerCase();
            if (langLower !== 'english' && langLower !== 'hindi' && langLower !== globalRegNameLower) {
                fourthLanguageSelect.add(new Option(lang.charAt(0).toUpperCase() + lang.slice(1), lang));
            }
        });
    }

    let draggedItemFlight = null;
    function updateFlightDraggableListOrder() {
        if(!languageOrderList || !langEnglishCheckbox || !langHindiCheckbox || !langRegionalActiveCheckbox || !fourthLanguageSelect || !langFourthActiveCheckbox) return;
        languageOrderList.innerHTML = '';
        const activeLangs = [];
        if (langEnglishCheckbox.checked) activeLangs.push({ id: 'english', name: 'English' });
        if (langHindiCheckbox.checked) activeLangs.push({ id: 'hindi', name: 'Hindi' });
        const globalRegName = currentGlobalSettingsForFlightPage.regional_language_name;
        if (globalRegName && langRegionalActiveCheckbox.checked) {
            activeLangs.push({ id: globalRegName, name: globalRegName.charAt(0).toUpperCase() + globalRegName.slice(1) });
        }
        const fourthLangName = fourthLanguageSelect.value;
        if (fourthLangName && langFourthActiveCheckbox.checked) {
            activeLangs.push({ id: fourthLangName, name: fourthLangName.charAt(0).toUpperCase() + fourthLangName.slice(1) });
        }
        let orderedElements = [];
        const currentOrderFromSettings = currentFlightSpecificSettings.language_order || [];
        currentOrderFromSettings.forEach(langId => {
            const lang = activeLangs.find(al => al.id === langId);
            if (lang && !orderedElements.find(ol => ol.id === lang.id)) orderedElements.push(lang);
        });
        activeLangs.forEach(lang => {
            if (!orderedElements.find(ol => ol.id === lang.id)) orderedElements.push(lang);
        });
        orderedElements = orderedElements.filter(lang => activeLangs.some(al => al.id === lang.id));
        orderedElements = orderedElements.slice(0, 4);
        orderedElements.forEach(lang => {
            const li = document.createElement('li');
            li.textContent = lang.name;
            li.dataset.langId = lang.id;
            li.draggable = true;
            addDragEventsToFlightListItem(li);
            languageOrderList.appendChild(li);
        });
    }

    function addDragEventsToFlightListItem(li) {
        li.addEventListener('dragstart', (e) => {
            draggedItemFlight = e.target;
            setTimeout(() => { if(draggedItemFlight) draggedItemFlight.style.opacity = '0.5'; }, 0);
        });
        li.addEventListener('dragend', () => {
            if(draggedItemFlight) draggedItemFlight.style.opacity = '1';
            draggedItemFlight = null;
        });
    }

    if(languageOrderList) languageOrderList.addEventListener('dragover', (e) => {
        e.preventDefault();
        const afterElement = getDragAfterElementFlight(languageOrderList, e.clientY);
        if (draggedItemFlight) {
            if (afterElement == null) languageOrderList.appendChild(draggedItemFlight);
            else languageOrderList.insertBefore(draggedItemFlight, afterElement);
        }
    });

    function getDragAfterElementFlight(container, y) {
        const draggableElements = [...container.querySelectorAll('li:not([style*="opacity: 0.5"])')];
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            if (offset < 0 && offset > closest.offset) return { offset: offset, element: child };
            return closest;
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }
    
    [langEnglishCheckbox, langHindiCheckbox, langRegionalActiveCheckbox, langFourthActiveCheckbox, fourthLanguageSelect].forEach(el => {
        if(el) el.addEventListener('change', updateFlightDraggableListOrder);
    });

    if(fourthLanguageSelect) fourthLanguageSelect.addEventListener('change', () => {
        if(langFourthActiveCheckbox){
            langFourthActiveCheckbox.disabled = !fourthLanguageSelect.value;
            if (!fourthLanguageSelect.value) {
                langFourthActiveCheckbox.checked = false;
                langFourthActiveCheckbox.dispatchEvent(new Event('change'));
            }
        }
    });

    async function loadSettingsForFlightPage() {
        showLoadingOnPage(true);
        try {
            await fetchAllSystemLanguages();
            const globalResponse = await fetch('http://localhost:4010/settings');
            if (!globalResponse.ok) throw new Error('Failed to load global settings context.');
            currentGlobalSettingsForFlightPage = await globalResponse.json();
            currentGlobalSettingsForFlightPage.audio_lag_minutes = currentGlobalSettingsForFlightPage.audio_lag_minutes || currentGlobalSettingsForFlightPage.audio_lag || 2;


            populateFourthLanguageSelect();
            if(globalRegionalLanguageNameDisplay) {
                const grn = currentGlobalSettingsForFlightPage.regional_language_name;
                globalRegionalLanguageNameDisplay.textContent = grn ? `(${grn.charAt(0).toUpperCase() + grn.slice(1)})` : '(None Set Globally)';
                globalRegionalLanguageNameDisplay.style.color = grn ? '#0f0' : '#aaa';
            }
            if(langRegionalActiveCheckbox) langRegionalActiveCheckbox.disabled = !currentGlobalSettingsForFlightPage.regional_language_name;

            const flightResponse = await fetch(`http://localhost:4010/settings/flight/${currentFlightNumber}`);
            if (flightResponse.ok) {
                currentFlightSpecificSettings = await flightResponse.json();
                // Ensure audio_lag_minutes is present or derived
                currentFlightSpecificSettings.audio_lag_minutes = currentFlightSpecificSettings.audio_lag_minutes || currentFlightSpecificSettings.audio_lag;
            } else if (flightResponse.status === 404) {
                currentFlightSpecificSettings = {}; 
                const data404 = await flightResponse.json().catch(() => ({}));
                if(data404.global_regional_language_name && !currentGlobalSettingsForFlightPage.regional_language_name){
                    currentGlobalSettingsForFlightPage.regional_language_name = data404.global_regional_language_name;
                     if(globalRegionalLanguageNameDisplay) globalRegionalLanguageNameDisplay.textContent = `(${data404.global_regional_language_name.charAt(0).toUpperCase() + data404.global_regional_language_name.slice(1)})`;
                     if(langRegionalActiveCheckbox) langRegionalActiveCheckbox.disabled = !data404.global_regional_language_name;
                }
            } else {
                throw new Error(`Failed to load flight settings: ${flightResponse.statusText}`);
            }
            applyFlightSettingsToForm(currentFlightSpecificSettings, currentGlobalSettingsForFlightPage);
        } catch (err) {
            showErrorOnPage(`Error loading settings: ${err.message}`);
            console.error(err);
            applyFlightSettingsToForm({}, { 
                languages: { english: true, hindi: false, regional_active_for_flight: false, fourth_lang_active: false },
                language_order: ['english'], frequency: 1, audio_lag_minutes: 2
            });
        } finally {
            showLoadingOnPage(false);
        }
    }

    function applyFlightSettingsToForm(flightSettings, globalDefaults) {
        const defaultLangs = globalDefaults.languages || {};
        const flightLangs = flightSettings.languages || {};

        if(langEnglishCheckbox) langEnglishCheckbox.checked = flightLangs.hasOwnProperty('english') ? flightLangs.english : (defaultLangs.english || false);
        if(langHindiCheckbox) langHindiCheckbox.checked = flightLangs.hasOwnProperty('hindi') ? flightLangs.hindi : (defaultLangs.hindi || false);
        if(langRegionalActiveCheckbox) {
            langRegionalActiveCheckbox.checked = globalDefaults.regional_language_name 
                ? (flightLangs.hasOwnProperty('regional_active_for_flight') ? flightLangs.regional_active_for_flight : (defaultLangs.regional_active || false))
                : false;
            langRegionalActiveCheckbox.disabled = !globalDefaults.regional_language_name;
        }
        if(langFourthActiveCheckbox) langFourthActiveCheckbox.checked = flightLangs.fourth_lang_active || false;
        if(fourthLanguageSelect) fourthLanguageSelect.value = flightSettings.fourth_language_name || "";
        if(langFourthActiveCheckbox) langFourthActiveCheckbox.disabled = !fourthLanguageSelect.value;

        if(frequencyInput) frequencyInput.value = flightSettings.frequency !== undefined && flightSettings.frequency !== null ? flightSettings.frequency : (globalDefaults.frequency || 1);
        if(audioLagSelect) audioLagSelect.value = flightSettings.audio_lag_minutes !== undefined && flightSettings.audio_lag_minutes !== null ? flightSettings.audio_lag_minutes : (globalDefaults.audio_lag_minutes || 2);
        
        currentFlightSpecificSettings = flightSettings; 
        updateFlightDraggableListOrder();
    }

    if(flightSettingsForm) flightSettingsForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        showLoadingOnPage(true);
        showErrorOnPage("");
        const selectedFourthLangName = fourthLanguageSelect.value;
        const isFourthEnabled = selectedFourthLangName ? langFourthActiveCheckbox.checked : false;
        const languagesData = {
            english: langEnglishCheckbox.checked,
            hindi: langHindiCheckbox.checked,
            regional_active_for_flight: currentGlobalSettingsForFlightPage.regional_language_name ? langRegionalActiveCheckbox.checked : false,
            fourth_lang_active: isFourthEnabled
        };
        const languageOrderData = Array.from(languageOrderList.querySelectorAll('li')).map(li => li.dataset.langId);
        let activeLangCount = 0;
        Object.values(languagesData).forEach(isActive => { if(isActive) activeLangCount++; });
        if (languageOrderData.length > 4 || languageOrderData.length !== activeLangCount) {
            showErrorOnPage("Language order must contain between 1 and 4 enabled languages and match the count of currently active languages.");
            showLoadingOnPage(false); return;
        }
        const flightSettingsPayload = {
            languages: languagesData,
            fourth_language_name: isFourthEnabled ? selectedFourthLangName : null,
            language_order: languageOrderData,
            frequency: parseInt(frequencyInput.value),
            audio_lag_minutes: parseInt(audioLagSelect.value) // Send as minutes
        };
        try {
            const response = await fetch(`http://localhost:4010/settings/flight/${currentFlightNumber}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(flightSettingsPayload)
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({message: "Unknown server error"}));
                throw new Error(errorData.message || `Failed to save: ${response.statusText}`);
            }
            alert('Flight-specific settings saved successfully!');
            currentFlightSpecificSettings = flightSettingsPayload; 
            updateFlightDraggableListOrder(); 
        } catch (err) {
            showErrorOnPage(`Error saving flight settings: ${err.message}`);
            console.error(err);
        } finally {
            showLoadingOnPage(false);
        }
    });

    function showLoadingOnPage(isLoading) {
        if (loadingMessage) loadingMessage.style.display = isLoading ? 'block' : 'none';
        if (saveButton) saveButton.disabled = isLoading;
    }
    function showErrorOnPage(message) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = message ? 'block' : 'none';
        }
    }
    loadSettingsForFlightPage();
});




logs.js-
    // frontend-service/public/js/logs.js
    document.addEventListener('DOMContentLoaded', () => {
        const logFiltersForm = document.getElementById('logFiltersForm');
        const logTypeFilter = document.getElementById('logTypeFilter');
        const serviceNameFilter = document.getElementById('serviceNameFilter');
        const flightNumberFilter = document.getElementById('flightNumberFilter');
        const startDateFilter = document.getElementById('startDateFilter');
        const endDateFilter = document.getElementById('endDateFilter');
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        const resetFiltersBtn = document.getElementById('resetFiltersBtn');

        const logsTableBody = document.getElementById('logsTableBody');
        const logsPaginationDiv = document.getElementById('logsPagination');
        const prevLogsPageBtn = document.getElementById('prevLogsPageBtn');
        const nextLogsPageBtn = document.getElementById('nextLogsPageBtn');
        const logsPageInfo = document.getElementById('logsPageInfo');

        const logDetailsModal = document.getElementById('logDetailsModal');
        const logDetailsJson = document.getElementById('logDetailsJson');
        
        let currentPage = 1;
        const itemsPerPage = 15; // Number of logs per page

        const LOGS_API_URL = 'http://localhost:4025/api/logs'; // URL of your logs-service

        async function fetchLogs(page = 1) {
            if (!logsTableBody) return;
            if (window.showLoadingMessage) window.showLoadingMessage(logsTableBody, "Fetching logs...", 7);
            else logsTableBody.innerHTML = `<tr><td colspan="7" class="loading-text">Fetching logs...</td></tr>`;
            
            if(logsPaginationDiv) logsPaginationDiv.style.display = 'none';

            const params = new URLSearchParams({
                page: page,
                limit: itemsPerPage,
            });

            if (logTypeFilter.value) params.append('log_type', logTypeFilter.value);
            if (serviceNameFilter.value) params.append('service_name', serviceNameFilter.value);
            if (flightNumberFilter.value.trim()) params.append('flight_number', flightNumberFilter.value.trim());
            if (startDateFilter.value) params.append('startDate', startDateFilter.value);
            if (endDateFilter.value) params.append('endDate', endDateFilter.value);

            try {
                const response = await fetch(`${LOGS_API_URL}?${params.toString()}`);
                if (!response.ok) {
                    const errData = await response.json().catch(() => ({ message: "Unknown error fetching logs."}));
                    throw new Error(errData.message || `HTTP error ${response.status}`);
                }
                const data = await response.json(); // Expects { logs: [], currentPage, totalPages, totalLogs }

                renderLogs(data.logs);
                updateLogsPagination(data.currentPage, data.totalPages, data.totalLogs);

            } catch (error) {
                console.error("Error fetching logs:", error);
                if (window.showErrorMessage) window.showErrorMessage(logsTableBody, `Error fetching logs: ${error.message}`, 7);
                else logsTableBody.innerHTML = `<tr><td colspan="7" class="error-message">Error fetching logs.</td></tr>`;
            }
        }

        function renderLogs(logs) {
            logsTableBody.innerHTML = ""; // Clear previous logs or loading message
            if (!logs || logs.length === 0) {
                if (window.showInfoMessage) window.showInfoMessage(logsTableBody, "No logs found matching your criteria.", 7);
                else logsTableBody.innerHTML = `<tr><td colspan="7" class="no-data-text">No logs found.</td></tr>`;
                return;
            }

            logs.forEach(log => {
                const row = logsTableBody.insertRow();
                const timestamp = new Date(log.timestamp).toLocaleString(); // Format timestamp nicely
                
                row.insertCell().textContent = timestamp;
                row.insertCell().textContent = log.service_name || 'N/A';
                row.insertCell().textContent = log.log_type || 'N/A';
                row.insertCell().textContent = log.flight_number || '--';
                row.insertCell().textContent = log.language || '--';
                
                const messageCell = row.insertCell();
                messageCell.textContent = log.message.length > 100 ? log.message.substring(0, 97) + "..." : log.message;
                if(log.message.length > 100) messageCell.title = log.message; // Show full message on hover

                const detailsCell = row.insertCell();
                if (log.details && Object.keys(log.details).length > 0) {
                    const viewButton = document.createElement('button');
                    viewButton.innerHTML = '<i class="fas fa-eye"></i> View';
                    viewButton.classList.add('action-btn', 'view-details-btn');
                    viewButton.onclick = () => showLogDetails(log.details);
                    detailsCell.appendChild(viewButton);
                } else {
                    detailsCell.textContent = '--';
                }
            });
        }

        function updateLogsPagination(page, totalPages, totalLogs) {
            if (!logsPaginationDiv || !logsPageInfo || !prevLogsPageBtn || !nextLogsPageBtn) return;

            currentPage = parseInt(page, 10);
            logsPageInfo.textContent = `Page ${currentPage} of ${totalPages > 0 ? totalPages : 1} (${totalLogs} total)`;
            prevLogsPageBtn.disabled = currentPage === 1;
            nextLogsPageBtn.disabled = currentPage === totalPages || totalPages === 0;

            logsPaginationDiv.style.display = totalLogs > itemsPerPage ? 'flex' : 'none';
        }

        function showLogDetails(details) {
            if (logDetailsJson && logDetailsModal) {
                logDetailsJson.textContent = JSON.stringify(details, null, 2); // Pretty print JSON
                logDetailsModal.style.display = 'block';
            }
        }

        window.closeLogDetailsModal = () => { // Make it global for onclick in HTML
            if (logDetailsModal) logDetailsModal.style.display = 'none';
        }
        // Close modal if clicked outside of modal-content
        window.onclick = function(event) {
            if (event.target == logDetailsModal) {
                closeLogDetailsModal();
            }
        }


        // Event Listeners
        if (applyFiltersBtn) {
            applyFiltersBtn.addEventListener('click', () => fetchLogs(1)); // Fetch first page with new filters
        }
        if (resetFiltersBtn) {
            resetFiltersBtn.addEventListener('click', () => {
                if (logFiltersForm) logFiltersForm.reset();
                fetchLogs(1); // Fetch first page with no filters
            });
        }
        if (prevLogsPageBtn) {
            prevLogsPageBtn.addEventListener('click', () => {
                if (currentPage > 1) fetchLogs(currentPage - 1);
            });
        }
        if (nextLogsPageBtn) {
            nextLogsPageBtn.addEventListener('click', () => {
                // Check against totalPages which should be updated by fetchLogs
                const totalPages = Math.ceil(parseInt(logsPageInfo.textContent.split('(')[1]) / itemsPerPage); // A bit hacky, better to store totalPages
                if (currentPage < totalPages) fetchLogs(currentPage + 1);
            });
        }

        // Initial load
        fetchLogs();
    });
    




  

permessions.js-
// frontend-service/public/js/permissions.js
document.addEventListener('DOMContentLoaded', () => {
    const permForm = document.getElementById('permForm');
    const userSelect = document.getElementById('permUserId'); // Corrected ID
    const pageSelect = document.getElementById('permPage'); // Corrected ID
    const permTableBody = document.getElementById('permTableBody');

    const USER_API_URL = "http://localhost:4016/api/users"; // User service
    const PERM_API_URL = "http://localhost:4016/api/permissions"; // Permissions within user/auth service

    // Load users into the dropdown
    async function loadUsersForDropdown() {
        if (!userSelect) return;
        try {
            const response = await fetch(USER_API_URL);
            if (!response.ok) throw new Error('Failed to fetch users for dropdown');
            const users = await response.json();
            userSelect.innerHTML = '<option value="">-- Select User --</option>'; // Placeholder
            users.forEach(user => {
                userSelect.add(new Option(`${user.name} (${user.email})`, user.id));
            });
        } catch (err) {
            console.error("Error loading users for dropdown:", err);
            userSelect.innerHTML = '<option value="">-- Error Loading Users --</option>';
        }
    }

    // Load current permissions
    async function loadPermissions() {
        if (!permTableBody) return;
        showLoadingMessage(permTableBody, "Loading permissions...", 5);
        try {
            const response = await fetch(PERM_API_URL);
            if (!response.ok) throw new Error('Failed to fetch permissions');
            const permissions = await response.json(); // Expects array like [{id, user_id, name (user), email, page}]

            permTableBody.innerHTML = "";
            if (permissions.length === 0) {
                showInfoMessage(permTableBody, "No permissions assigned yet.", 5);
                return;
            }
            permissions.forEach((perm, index) => {
                const row = permTableBody.insertRow();
                row.insertCell().textContent = index + 1;
                row.insertCell().textContent = perm.name || perm.user_name || 'N/A'; // User name
                row.insertCell().textContent = perm.email || 'N/A'; // User email
                row.insertCell().textContent = perm.page;
                
                const actionCell = row.insertCell();
                const deleteButton = document.createElement('button');
                deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Revoke';
                deleteButton.classList.add("action-btn", "delete-btn");
                deleteButton.title = `Revoke permission for ${perm.page} from ${perm.name || perm.user_name}`;
                deleteButton.addEventListener('click', () => removePermission(perm.id, perm.page, perm.name || perm.user_name));
                actionCell.appendChild(deleteButton);
            });
        } catch (err) {
            console.error("Error loading permissions:", err);
            if (permTableBody) showErrorMessage(permTableBody, "Error loading permissions. Check console.", 5);
        }
    }

    // Assign Permission
    if (permForm) {
        permForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = userSelect.value;
            const page = pageSelect.value;

            if (!userId || !page) {
                alert("Please select both a user and a page to assign permission.");
                return;
            }

            try {
                const response = await fetch(PERM_API_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ user_id: userId, page: page }),
                });
                if (!response.ok) {
                    const errorData = await response.json().catch(()=>({message: "Failed to assign permission."}));
                    throw new Error(errorData.message);
                }
                alert("✅ Permission assigned successfully!");
                permForm.reset(); // Reset form fields
                loadPermissions(); // Refresh the table
            } catch (err) {
                console.error("❌ Error assigning permission:", err.message);
                alert(`❌ Error: ${err.message}`);
            }
        });
    }

    // Remove Permission
    async function removePermission(permissionId, pageName, userName) {
        if (!confirm(`Are you sure you want to revoke permission for page "${pageName}" from user "${userName}"?`)) return;
        try {
            const response = await fetch(`${PERM_API_URL}/${permissionId}`, { method: "DELETE" });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({message: "Failed to revoke permission."}));
                throw new Error(errorData.message);
            }
            alert("Permission revoked successfully.");
            loadPermissions(); // Refresh the table
        } catch (err) {
            console.error("❌ Error revoking permission:", err.message);
            alert(`❌ Error: ${err.message}`);
        }
    }
    // window.removePermission = removePermission; // Not needed if using addEventListener

    // Initial Loads
    loadUsersForDropdown();
    loadPermissions();
});



scheduler.js-
// frontend-service/public/js/scheduler.js
document.addEventListener('DOMContentLoaded', () => {
    const schedulerForm = document.getElementById('scheduler-form');
    const messageNameInput = document.getElementById('messageName');
    const languageSelect = document.getElementById('messageLanguage');
    const audioFileSelect = document.getElementById('audioFileMessage');
    const transcriptionInput = document.getElementById('transcriptionMessage'); // Corrected ID
    const startDateInput = document.getElementById('startDate'); // Corrected ID
    const endDateInput = document.getElementById('endDate'); // Corrected ID
    const timingContainer = document.getElementById('timing-container');
    const addTimingBtn = document.getElementById('add-timing-btn'); // Corrected ID
    const frequencySelect = document.getElementById('frequencyDays'); // Corrected ID
    const scheduleTableBody = document.getElementById('schedule-table-body'); // Corrected ID
    const searchBox = document.getElementById('search-box');
    const editIdInput = document.getElementById('edit-id'); // Hidden input for ID
    const scheduleSubmitBtn = document.getElementById('scheduleSubmitBtn');

    let allSchedules = [];
    let availableAudioFiles = []; // To store audio files for the selected language

    // Load languages for the dropdown
    async function loadLanguagesForScheduler() {
        if (!languageSelect) return;
        try {
            const response = await fetch("http://localhost:4003/languages"); // From Upload Service
            if (!response.ok) throw new Error('Failed to fetch languages');
            const languages = await response.json();
            languageSelect.innerHTML = '<option value="">-- Select Language --</option>';
            languages.forEach(lang => {
                languageSelect.add(new Option(lang.charAt(0).toUpperCase() + lang.slice(1), lang));
            });
        } catch (err) {
            console.error("Error loading languages for scheduler:", err);
            languageSelect.innerHTML = '<option value="">-- Error Loading --</option>';
        }
    }

    // Load audio files based on selected language (type: specialmessage)
    async function loadAudioFilesForLanguage(language) {
        if (!audioFileSelect || !language) {
            if(audioFileSelect) audioFileSelect.innerHTML = '<option value="">-- Select Language First --</option>';
            if(transcriptionInput) transcriptionInput.value = "";
            availableAudioFiles = [];
            return;
        }
        audioFileSelect.innerHTML = '<option value="">Loading audio files...</option>';
        try {
            // Fetching from upload-service, assuming it can filter by audioType
            // The endpoint should be like /upload?language=english&audioType=specialmessage
            const response = await fetch(`http://localhost:4003/upload?language=${encodeURIComponent(language)}&audioType=specialmessage`);
            if (!response.ok) throw new Error('Failed to fetch audio files');
            const audios = await response.json(); // Expects array of audio objects {id, filePath, transcription}
            
            availableAudioFiles = audios; // Store for transcription lookup
            audioFileSelect.innerHTML = '<option value="">-- Select Audio File --</option>';
            if (audios.length === 0) {
                audioFileSelect.innerHTML = '<option value="">-- No special messages found --</option>';
            } else {
                audios.forEach(audio => {
                    const fileName = audio.filePath.split(/[\\/]/).pop();
                    // Value should be something unique, like the audio ID or full filename if unique
                    // For simplicity, using filename. Backend will need to map this back.
                    // Ideally, value should be audio.id if the scheduler service can handle it.
                    // For now, let's assume the scheduler service expects filename.
                    audioFileSelect.add(new Option(fileName, audio.filePath)); // Using full relative path as value
                });
            }
             if(transcriptionInput) transcriptionInput.value = ""; // Clear transcription on language change
        } catch (err) {
            console.error("Error loading audio files:", err);
            audioFileSelect.innerHTML = '<option value="">-- Error Loading Audio --</option>';
             if(transcriptionInput) transcriptionInput.value = "";
        }
    }
    
    // Update transcription when audio file changes
    if(audioFileSelect && transcriptionInput) {
        audioFileSelect.addEventListener('change', () => {
            const selectedFilePath = audioFileSelect.value;
            const selectedAudio = availableAudioFiles.find(audio => audio.filePath === selectedFilePath);
            transcriptionInput.value = selectedAudio ? (selectedAudio.transcription || "N/A") : "";
        });
    }


    if(languageSelect) languageSelect.addEventListener('change', (e) => {
        loadAudioFilesForLanguage(e.target.value);
    });

    // Add more timing fields
    if(addTimingBtn && timingContainer) addTimingBtn.addEventListener('click', () => {
        const input = document.createElement('input');
        input.type = 'time';
        input.className = 'timing-field';
        input.required = true; // New timing fields should also be required
        timingContainer.appendChild(input);
    });

    // Form Submission
    if(schedulerForm) schedulerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const id = editIdInput.value; // Get ID for editing, if any

        const timings = Array.from(timingContainer.querySelectorAll('.timing-field'))
                             .map(input => input.value).filter(time => time); // Filter out empty time inputs
        if (timings.length === 0) {
            alert("Please add at least one valid timing.");
            return;
        }

        const selectedFrequencyOptions = Array.from(frequencySelect.selectedOptions).map(opt => opt.value);
         if (selectedFrequencyOptions.length === 0) {
            alert("Please select at least one day for frequency.");
            return;
        }


        const formData = {
            name: messageNameInput.value,
            language: languageSelect.value,
            // audioId: audioFileSelect.value, // This should be the ID or unique identifier of the audio file
            // For now, sending the filePath. Backend needs to handle this.
            // If your audioFileSelect stores audio IDs, use that.
            audioFilePath: audioFileSelect.value, // Example: /english/specialmessage/greeting.wav
            // transcription is not usually sent, it's derived from audio file
            start_date: startDateInput.value,
            end_date: endDateInput.value,
            timing: JSON.stringify(timings), // Send as JSON string
            frequency: JSON.stringify(selectedFrequencyOptions) // Send as JSON string
        };

        const url = id ? `http://localhost:4004/scheduler/${id}` : "http://localhost:4004/scheduler";
        const method = id ? "PUT" : "POST";

        try {
            const response = await fetch(url, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });
            if (!response.ok) {
                const errData = await response.json().catch(()=>({message: "Operation failed"}));
                throw new Error(errData.message);
            }
            alert(`Schedule ${id ? 'updated' : 'created'} successfully!`);
            schedulerForm.reset();
            editIdInput.value = ""; // Clear edit ID
            if(scheduleSubmitBtn) scheduleSubmitBtn.textContent = "📅 Schedule Message";
            // Reset timing container to one field
            timingContainer.innerHTML = '<input type="time" class="timing-field" required>';
            loadSchedules();
        } catch (err) {
            console.error("Error saving schedule:", err);
            alert(`Error: ${err.message}`);
        }
    });

    // Load and Display Schedules
    async function loadSchedules() {
        if (!scheduleTableBody) return;
        showLoadingMessage(scheduleTableBody, "Loading schedules...", 8);
        try {
            const response = await fetch("http://localhost:4004/scheduler");
            if (!response.ok) throw new Error('Failed to fetch schedules');
            allSchedules = await response.json();
            renderScheduleTable(allSchedules);
        } catch (err) {
            console.error("Error loading schedules:", err);
            showErrorMessage(scheduleTableBody, "Error loading schedules.", 8);
        }
    }

    function renderScheduleTable(schedulesToRender) {
        if (!scheduleTableBody) return;
        scheduleTableBody.innerHTML = "";
        if (schedulesToRender.length === 0) {
            showInfoMessage(scheduleTableBody, "No schedules found.", 8);
            return;
        }

        schedulesToRender.forEach((schedule, index) => {
            const row = scheduleTableBody.insertRow();
            row.insertCell().textContent = index + 1;
            row.insertCell().textContent = schedule.name;
            row.insertCell().textContent = schedule.language;
            // audioFilePath might be like /english/specialmessage/file.wav
            // Display just the filename
            const audioFileName = schedule.audioFilePath ? schedule.audioFilePath.split(/[\\/]/).pop() : (schedule.audioId || "N/A");
            row.insertCell().textContent = audioFileName;
            
            let timingsDisplay = "N/A";
            try {
                const parsedTimings = JSON.parse(schedule.timing); // Assuming 'timing' is a JSON string array
                if(Array.isArray(parsedTimings)) timingsDisplay = parsedTimings.join(', ');
            } catch(e) { console.warn("Could not parse timings for schedule:", schedule.id, schedule.timing); }
            row.insertCell().textContent = timingsDisplay;

            row.insertCell().textContent = `${schedule.start_date} to ${schedule.end_date}`;
            
            let frequencyDisplay = "N/A";
            try {
                const parsedFrequency = JSON.parse(schedule.frequency); // Assuming 'frequency' is a JSON string array
                if(Array.isArray(parsedFrequency)) frequencyDisplay = parsedFrequency.join(', ');
            } catch(e) { console.warn("Could not parse frequency for schedule:", schedule.id, schedule.frequency); }
            row.insertCell().textContent = frequencyDisplay;

            const actionCell = row.insertCell();
            const editButton = document.createElement('button');
            editButton.innerHTML = '<i class="fas fa-edit"></i> Edit';
            editButton.classList.add("action-btn", "edit-btn");
            editButton.addEventListener('click', () => populateFormForEdit(schedule));
            actionCell.appendChild(editButton);

            const deleteButton = document.createElement('button');
            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
            deleteButton.classList.add("action-btn", "delete-btn");
            deleteButton.addEventListener('click', () => deleteSchedule(schedule.id));
            actionCell.appendChild(deleteButton);
        });
    }
    
    // Populate form for editing
    function populateFormForEdit(schedule) {
        if(!schedulerForm || !editIdInput || !messageNameInput || !languageSelect || !audioFileSelect || !startDateInput || !endDateInput || !timingContainer || !frequencySelect || !scheduleSubmitBtn) return;
        
        editIdInput.value = schedule.id;
        messageNameInput.value = schedule.name;
        languageSelect.value = schedule.language;
        
        // Important: Load audio files for the language *before* trying to set audioFileSelect.value
        loadAudioFilesForLanguage(schedule.language).then(() => {
            audioFileSelect.value = schedule.audioFilePath; // Or schedule.audioId if that's what's stored/sent
            // Trigger change to update transcription if audioFileSelect has an event listener
            audioFileSelect.dispatchEvent(new Event('change'));
        });

        startDateInput.value = schedule.start_date;
        endDateInput.value = schedule.end_date;

        timingContainer.innerHTML = ""; // Clear existing timing fields
        try {
            const timings = JSON.parse(schedule.timing);
            if (Array.isArray(timings) && timings.length > 0) {
                timings.forEach(time => {
                    const input = document.createElement('input');
                    input.type = 'time';
                    input.className = 'timing-field';
                    input.value = time;
                    input.required = true;
                    timingContainer.appendChild(input);
                });
            } else { // Add one empty field if no timings or parsing failed
                const input = document.createElement('input');
                input.type = 'time'; input.className = 'timing-field'; input.required = true;
                timingContainer.appendChild(input);
            }
        } catch(e) {
            const input = document.createElement('input');
            input.type = 'time'; input.className = 'timing-field'; input.required = true;
            timingContainer.appendChild(input);
        }


        // Set selected options for frequency (multi-select)
        Array.from(frequencySelect.options).forEach(opt => opt.selected = false); // Deselect all first
        try {
            const frequencies = JSON.parse(schedule.frequency);
            if (Array.isArray(frequencies)) {
                frequencies.forEach(day => {
                    const option = Array.from(frequencySelect.options).find(opt => opt.value === day);
                    if (option) option.selected = true;
                });
            }
        } catch(e) { /* Leave as default if parsing fails */ }
        
        if(scheduleSubmitBtn) scheduleSubmitBtn.innerHTML = '<i class="fas fa-save"></i> Update Schedule';
        window.scrollTo({ top: schedulerForm.offsetTop - 20, behavior: 'smooth' });
    }

    // Delete Schedule
    async function deleteSchedule(id) {
        if (!confirm("Are you sure you want to delete this scheduled message?")) return;
        try {
            const response = await fetch(`http://localhost:4004/scheduler/${id}`, { method: "DELETE" });
            if (!response.ok) throw new Error('Failed to delete schedule');
            alert("Schedule deleted successfully.");
            loadSchedules(); // Refresh the table
        } catch (err) {
            console.error("Error deleting schedule:", err);
            alert("Error deleting schedule.");
        }
    }

    // Search functionality
    if(searchBox) searchBox.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase();
        const filtered = allSchedules.filter(s => 
            s.name.toLowerCase().includes(query) ||
            (s.audioFilePath && s.audioFilePath.toLowerCase().includes(query))
        );
        renderScheduleTable(filtered);
    });

    // Initial Loads
    loadLanguagesForScheduler();
    loadSchedules();
});



sequence.js-
// frontend-service/public/js/sequence.js
document.addEventListener('DOMContentLoaded', () => {
    const areaSelect = document.getElementById("areaSequenceSelect");
    const languageTabsContainer = document.getElementById("sequenceLanguageTabs");
    const announcementTypeSelect = document.getElementById("announcementTypeSelect");
    const sequenceForm = document.getElementById("scriptmanager-form");
    const scriptIdInput = document.getElementById("script-id");
    const sequenceInput = document.getElementById("sequenceInput");
    const transcriptionOutput = document.getElementById("transcriptionOutput");
    const getTranscriptionBtn = document.getElementById("getTranscriptionBtn");
    const addScriptBtn = document.getElementById("addScriptBtn"); // Assuming this is the submit button
    const scriptsTableBody = document.getElementById("scriptsTableBody");

    let currentSelectedLanguageForSequence = null;
    let currentSelectedAreaForSequence = areaSelect ? areaSelect.value : null;

    // Populate Language Tabs
    if (languageTabsContainer && window.populateLanguageTabs) {
        window.populateLanguageTabs(languageTabsContainer, (selectedLanguage) => {
            currentSelectedLanguageForSequence = selectedLanguage;
            if (selectedLanguage && currentSelectedAreaForSequence) {
                loadAnnouncementTypesForSequence(selectedLanguage, currentSelectedAreaForSequence);
                loadScripts(selectedLanguage, currentSelectedAreaForSequence);
            } else {
                if(announcementTypeSelect) announcementTypeSelect.innerHTML = '<option value="">-- Select Language & Area --</option>';
                if(scriptsTableBody) showInfoMessage(scriptsTableBody, "Please select language and area.", 5);
            }
        }, "Loading languages...");
    }

    // Load Announcement Types based on Language and Area
    async function loadAnnouncementTypesForSequence(language, area) {
        if (!announcementTypeSelect) return;
        announcementTypeSelect.innerHTML = '<option value="">Loading types...</option>';
        try {
            const response = await fetch(`http://localhost:4006/announcementtype/types?language=${encodeURIComponent(language)}&area=${encodeURIComponent(area)}`);
            if (!response.ok) throw new Error('Failed to fetch announcement types');
            const types = await response.json(); // Expecting array of strings

            announcementTypeSelect.innerHTML = '<option value="">-- Select Announcement Type --</option>';
            if (types.length === 0) {
                announcementTypeSelect.innerHTML = '<option value="">-- No types found for selection --</option>';
            } else {
                types.forEach(type => {
                    announcementTypeSelect.add(new Option(type, type));
                });
            }
        } catch (err) {
            console.error("Error loading announcement types for sequence:", err);
            announcementTypeSelect.innerHTML = '<option value="">-- Error loading types --</option>';
        }
    }

    // Load Scripts into table
    async function loadScripts(language, area) {
        if (!scriptsTableBody) return;
        showLoadingMessage(scriptsTableBody, `Loading scripts for ${language} in ${area}...`, 5);

        try {
            const response = await fetch(`http://localhost:4006/scriptmanager/scripts?language=${encodeURIComponent(language)}&area=${encodeURIComponent(area)}`);
            if (!response.ok) throw new Error('Failed to fetch scripts');
            const scripts = await response.json();
            scriptsTableBody.innerHTML = "";

            if (scripts.length === 0) {
                showInfoMessage(scriptsTableBody, `No scripts found for ${language} in ${area}.`, 5);
                return;
            }
            scripts.forEach((script, index) => {
                const row = scriptsTableBody.insertRow();
                row.insertCell().textContent = index + 1;
                row.insertCell().textContent = script.announcement_type;
                // Sequence might be JSON string, parse it for display if needed, or display as is
                let sequenceDisplay = script.sequence;
                try {
                    const parsedSequence = JSON.parse(script.sequence);
                    if (Array.isArray(parsedSequence)) {
                        sequenceDisplay = parsedSequence.join(', ');
                    }
                } catch (e) { /* Keep as string if not valid JSON array */ }
                row.insertCell().textContent = sequenceDisplay;
                row.insertCell().textContent = script.transcription || "N/A";
                
                const actionCell = row.insertCell();
                const editButton = document.createElement('button');
                editButton.innerHTML = '<i class="fas fa-edit"></i> Edit';
                editButton.classList.add("action-btn", "edit-btn");
                editButton.addEventListener('click', () => populateFormForEdit(script));
                actionCell.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                deleteButton.classList.add("action-btn", "delete-btn");
                deleteButton.addEventListener('click', () => deleteScript(script.id, language, area));
                actionCell.appendChild(deleteButton);
            });
        } catch (err) {
            console.error("Error loading scripts:", err);
            showErrorMessage(scriptsTableBody, "Error loading scripts.", 5);
        }
    }
    
    // Populate form for editing a script
    function populateFormForEdit(script) {
        if (!scriptIdInput || !announcementTypeSelect || !sequenceInput || !transcriptionOutput || !addScriptBtn) return;
        scriptIdInput.value = script.id;
        // Area and Language are already selected in the UI
        announcementTypeSelect.value = script.announcement_type;
        
        let sequenceDisplay = script.sequence;
        try {
            const parsedSequence = JSON.parse(script.sequence);
            if (Array.isArray(parsedSequence)) {
                sequenceDisplay = parsedSequence.join(', ');
            }
        } catch (e) { /* Keep as string */ }
        sequenceInput.value = sequenceDisplay;
        transcriptionOutput.value = script.transcription || "";
        addScriptBtn.innerHTML = '<i class="fas fa-save"></i> Update Sequence';
        addScriptBtn.classList.add("update-btn"); // Optional: for different styling
        window.scrollTo({ top: sequenceForm.offsetTop - 20, behavior: 'smooth' }); // Scroll to form
    }

    // Reset form
    function resetSequenceForm() {
        if (!scriptIdInput || !sequenceInput || !transcriptionOutput || !addScriptBtn || !announcementTypeSelect) return;
        scriptIdInput.value = "";
        if(announcementTypeSelect.options.length > 0) announcementTypeSelect.selectedIndex = 0;
        sequenceInput.value = "";
        transcriptionOutput.value = "";
        addScriptBtn.innerHTML = '<i class="fas fa-plus-circle"></i> Add Sequence';
        addScriptBtn.classList.remove("update-btn");
    }

    // Get Transcription
    if(getTranscriptionBtn) getTranscriptionBtn.addEventListener('click', async () => {
        if (!sequenceInput || !transcriptionOutput || !currentSelectedLanguageForSequence) {
            alert("Sequence input or language selection is missing.");
            return;
        }
        const sequence = sequenceInput.value.trim();
        if (!sequence) {
            alert("Please enter a sequence first.");
            return;
        }
        transcriptionOutput.value = "Fetching transcription...";
        try {
            // The API expects sequence as a comma-separated string
            const response = await fetch(`http://localhost:4006/scriptmanager/transcriptions?sequence=${encodeURIComponent(sequence)}&language=${encodeURIComponent(currentSelectedLanguageForSequence)}`);
            if (!response.ok) throw new Error('Failed to get transcription');
            const data = await response.json();
            transcriptionOutput.value = data.transcriptions ? data.transcriptions.join(' ') : "No transcription available or error.";
        } catch (err) {
            console.error("Error getting transcription:", err);
            transcriptionOutput.value = "Error fetching transcription.";
        }
    });

    // Form Submission (Add/Update Script)
    if(sequenceForm) sequenceForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!currentSelectedLanguageForSequence || !currentSelectedAreaForSequence || !announcementTypeSelect.value || !sequenceInput.value) {
            alert("Please ensure Area, Language, Announcement Type, and Sequence are filled.");
            return;
        }

        const scriptId = scriptIdInput.value;
        const payload = {
            language: currentSelectedLanguageForSequence,
            area: currentSelectedAreaForSequence,
            announcementType: announcementTypeSelect.value,
            sequence: sequenceInput.value.trim(), // API expects comma-separated string
            transcription: transcriptionOutput.value.trim()
        };

        const method = scriptId ? "PUT" : "POST";
        const url = `http://localhost:4006/scriptmanager/scripts${scriptId ? `/${scriptId}` : ""}`;

        try {
            const response = await fetch(url, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({message: "Operation failed."}));
                throw new Error(errorData.message);
            }
            alert(`Script ${scriptId ? 'updated' : 'added'} successfully!`);
            resetSequenceForm();
            loadScripts(currentSelectedLanguageForSequence, currentSelectedAreaForSequence);
        } catch (err) {
            console.error("Error saving script:", err);
            alert(`Error saving script: ${err.message}`);
        }
    });
    
    // Delete Script
    async function deleteScript(id, language, area) {
        if (!confirm("Are you sure you want to delete this script sequence?")) return;
        try {
            const response = await fetch(`http://localhost:4006/scriptmanager/scripts/${id}`, { method: "DELETE" });
            if (!response.ok) throw new Error('Failed to delete script');
            alert("Script deleted successfully.");
            loadScripts(language, area); // Refresh
        } catch (err) {
            console.error("Error deleting script:", err);
            alert("Error deleting script.");
        }
    }
    // window.deleteScript = deleteScript; // Not needed if using event listeners

    // Event listener for Area select change
    if(areaSelect) areaSelect.addEventListener('change', (e) => {
        currentSelectedAreaForSequence = e.target.value;
        resetSequenceForm(); // Reset form when area changes
        if (currentSelectedLanguageForSequence && currentSelectedAreaForSequence) {
            loadAnnouncementTypesForSequence(currentSelectedLanguageForSequence, currentSelectedAreaForSequence);
            loadScripts(currentSelectedLanguageForSequence, currentSelectedAreaForSequence);
        } else {
            if(announcementTypeSelect) announcementTypeSelect.innerHTML = '<option value="">-- Select Language & Area --</option>';
            if(scriptsTableBody) showInfoMessage(scriptsTableBody, "Please select language and area.", 5);
        }
    });

    // Initial load (triggered by populateLanguageTabs callback)
});

  



settings.js-
// frontend-service/public/js/settings.js (for Global Settings Page)
document.addEventListener('DOMContentLoaded', async () => {
    // DOM Elements
    const globalSettingsForm = document.getElementById('globalSettingsForm');
    const langEnglishCheckbox = document.getElementById('lang_english');
    const langHindiCheckbox = document.getElementById('lang_hindi');
    const regionalLanguageSelect = document.getElementById('regionalLanguageSelect');
    const langRegionalActiveCheckbox = document.getElementById('lang_regional_active');
    const languageOrderList = document.getElementById('languageOrderList');
    const frequencyInput = document.getElementById('frequency');
    const audioLagSelect = document.getElementById('audioLag'); // This will now be for minutes
    const advanceTimeInput = document.getElementById('advanceTime');
    const saveButton = document.getElementById('saveGlobalSettingsBtn');
    const loadingMessage = document.getElementById('loadingMessage');
    const errorMessage = document.getElementById('errorMessage');

    let availableSystemLanguages = [];
    let currentGlobalSettings = {};

    // Populate Audio Lag dropdown (1-10 minutes)
    if (audioLagSelect) {
        for (let i = 1; i <= 10; i++) {
            audioLagSelect.add(new Option(`${i} minute${i > 1 ? 's' : ''}`, i));
        }
    }

    async function fetchAvailableLanguagesForRegionalSelect() {
        try {
            const response = await fetch('http://localhost:4003/languages');
            if (!response.ok) throw new Error('Failed to fetch system languages');
            availableSystemLanguages = await response.json();
            if(regionalLanguageSelect) regionalLanguageSelect.innerHTML = '<option value="">-- None --</option>';
            availableSystemLanguages.forEach(lang => {
                const langLower = lang.toLowerCase();
                if (langLower !== 'english' && langLower !== 'hindi') {
                    if(regionalLanguageSelect) regionalLanguageSelect.add(new Option(lang.charAt(0).toUpperCase() + lang.slice(1), lang));
                }
            });
        } catch (err) {
            if (window.showErrorMessage && errorMessage) window.showErrorMessage(errorMessage, 'Could not load available languages for regional selection.');
            else if(errorMessage) errorMessage.textContent = 'Could not load available languages.';
            console.error('Could not load available languages.', err);
        }
    }

    let draggedItem = null;
    function updateDraggableListOrder() {
        if (!languageOrderList || !langEnglishCheckbox || !langHindiCheckbox || !regionalLanguageSelect || !langRegionalActiveCheckbox) return;
        languageOrderList.innerHTML = '';
        const activeLangsForOrder = [];
        if (langEnglishCheckbox.checked) activeLangsForOrder.push({ id: 'english', name: 'English' });
        if (langHindiCheckbox.checked) activeLangsForOrder.push({ id: 'hindi', name: 'Hindi' });
        const selectedRegionalValue = regionalLanguageSelect.value;
        if (selectedRegionalValue && langRegionalActiveCheckbox.checked) {
            activeLangsForOrder.push({ id: selectedRegionalValue, name: selectedRegionalValue.charAt(0).toUpperCase() + selectedRegionalValue.slice(1) });
        }

        let orderedElements = [];
        const currentOrderFromSettings = currentGlobalSettings.language_order || [];
        currentOrderFromSettings.forEach(langId => {
            const lang = activeLangsForOrder.find(al => al.id === langId);
            if (lang && !orderedElements.find(ol => ol.id === lang.id)) orderedElements.push(lang);
        });
        activeLangsForOrder.forEach(lang => {
            if (!orderedElements.find(ol => ol.id === lang.id)) orderedElements.push(lang);
        });
        orderedElements = orderedElements.filter(lang => activeLangsForOrder.some(al => al.id === lang.id));
        orderedElements.forEach(lang => {
            const li = document.createElement('li');
            li.textContent = lang.name;
            li.dataset.langId = lang.id; 
            li.draggable = true;
            addDragEventsToListItem(li);
            languageOrderList.appendChild(li);
        });
    }

    function addDragEventsToListItem(li) {
        li.addEventListener('dragstart', (e) => {
            draggedItem = e.target;
            setTimeout(() => { if(draggedItem) draggedItem.style.opacity = '0.5'; }, 0);
        });
        li.addEventListener('dragend', () => {
            if(draggedItem) draggedItem.style.opacity = '1';
            draggedItem = null;
        });
    }

    if (languageOrderList) {
        languageOrderList.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterElement = getDragAfterElement(languageOrderList, e.clientY);
            if (draggedItem) {
                if (afterElement == null) languageOrderList.appendChild(draggedItem);
                else languageOrderList.insertBefore(draggedItem, afterElement);
            }
        });
    }

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('li:not([style*="opacity: 0.5"])')];
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            if (offset < 0 && offset > closest.offset) return { offset: offset, element: child };
            return closest;
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    [langEnglishCheckbox, langHindiCheckbox, langRegionalActiveCheckbox, regionalLanguageSelect].forEach(el => {
        if(el) el.addEventListener('change', updateDraggableListOrder);
    });
    
    if(regionalLanguageSelect) regionalLanguageSelect.addEventListener('change', () => {
        if(langRegionalActiveCheckbox) {
            langRegionalActiveCheckbox.disabled = !regionalLanguageSelect.value;
            if (!regionalLanguageSelect.value) {
                langRegionalActiveCheckbox.checked = false;
                langRegionalActiveCheckbox.dispatchEvent(new Event('change')); 
            }
        }
    });

    async function loadGlobalSettings() {
        showLoadingOnPage(true);
        try {
            await fetchAvailableLanguagesForRegionalSelect(); 
            const response = await fetch('http://localhost:4010/settings');
            if (!response.ok) {
                console.warn(`Global settings fetch failed (Status: ${response.status}). Using defaults.`);
                currentGlobalSettings = {
                    languages: { english: true, hindi: false, regional_active: false },
                    regional_language_name: null, language_order: ['english'],
                    frequency: 1, audio_lag_minutes: 2, advance_minutes: 15 // Default audio_lag_minutes
                };
            } else {
                currentGlobalSettings = await response.json();
                // Ensure new fields have defaults if loading older settings
                currentGlobalSettings.audio_lag_minutes = currentGlobalSettings.audio_lag_minutes || currentGlobalSettings.audio_lag || 2; // Prioritize new, fallback to old, then default
                currentGlobalSettings.advance_minutes = currentGlobalSettings.advance_minutes || currentGlobalSettings.advanceTime || 15;
            }
            applySettingsToForm(currentGlobalSettings);
        } catch (err) {
            showErrorOnPage(`Error loading global settings: ${err.message}. Defaults applied.`);
            console.error(err);
            currentGlobalSettings = { 
                languages: { english: true, hindi: false, regional_active: false },
                regional_language_name: null, language_order: ['english'],
                frequency: 1, audio_lag_minutes: 2, advance_minutes: 15
            };
            applySettingsToForm(currentGlobalSettings);
        } finally {
            showLoadingOnPage(false);
        }
    }

    function applySettingsToForm(settings) {
        if(langEnglishCheckbox) langEnglishCheckbox.checked = settings.languages?.english || false;
        if(langHindiCheckbox) langHindiCheckbox.checked = settings.languages?.hindi || false;
        if(regionalLanguageSelect) regionalLanguageSelect.value = settings.regional_language_name || "";
        if(langRegionalActiveCheckbox) {
            langRegionalActiveCheckbox.disabled = !regionalLanguageSelect.value; 
            langRegionalActiveCheckbox.checked = regionalLanguageSelect.value ? (settings.languages?.regional_active || false) : false;
        }
        if(frequencyInput) frequencyInput.value = settings.frequency !== undefined ? settings.frequency : 1;
        if(audioLagSelect) audioLagSelect.value = settings.audio_lag_minutes !== undefined ? settings.audio_lag_minutes : 2; // Use audio_lag_minutes
        if(advanceTimeInput) advanceTimeInput.value = settings.advance_minutes !== undefined ? settings.advance_minutes : 15;
        updateDraggableListOrder(); 
    }
    
    if(globalSettingsForm) globalSettingsForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        showLoadingOnPage(true);
        showErrorOnPage(""); 
        const selectedRegionalName = regionalLanguageSelect.value;
        const isRegionalEnabled = selectedRegionalName ? langRegionalActiveCheckbox.checked : false;
        const languagesData = {
            english: langEnglishCheckbox.checked,
            hindi: langHindiCheckbox.checked,
            regional_active: isRegionalEnabled
        };
        const languageOrderData = Array.from(languageOrderList.querySelectorAll('li')).map(li => li.dataset.langId);
        const settingsPayload = {
            languages: languagesData,
            regional_language_name: selectedRegionalName || null,
            language_order: languageOrderData,
            frequency: parseInt(frequencyInput.value),
            audio_lag_minutes: parseInt(audioLagSelect.value), // Send as minutes
            advance_minutes: parseInt(advanceTimeInput.value)
        };
        const activeLangCount = (languagesData.english ? 1:0) + (languagesData.hindi ? 1:0) + (languagesData.regional_active ? 1:0);
        if (languageOrderData.length !== activeLangCount) {
            showErrorOnPage("Language order must match the count of enabled languages.");
            showLoadingOnPage(false); return;
        }
        try {
            const response = await fetch('http://localhost:4010/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settingsPayload)
            });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({message:"Unknown server error."}));
                throw new Error(errorData.message || `Failed to save: ${response.statusText}`);
            }
            alert('Global settings saved successfully!');
            currentGlobalSettings = settingsPayload; 
            updateDraggableListOrder(); 
        } catch (err) {
            showErrorOnPage(`Error saving global settings: ${err.message}`);
            console.error(err);
        } finally {
            showLoadingOnPage(false);
        }
    });

    function showLoadingOnPage(isLoading) {
        if (loadingMessage) loadingMessage.style.display = isLoading ? 'block' : 'none';
        if (saveButton) saveButton.disabled = isLoading;
    }
    function showErrorOnPage(message) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = message ? 'block' : 'none';
        }
    }
    loadGlobalSettings();
});





tts-utility.js-
// frontend-service/public/js/tts-utility.js
document.addEventListener('DOMContentLoaded', () => {
    const ttsForm = document.getElementById('ttsAppForm');
    const textInput = document.getElementById('textToSynthesizeApp');
    const voiceSelect = document.getElementById('voiceIdApp');
    const engineSelect = document.getElementById('engineApp');
    const statusMessage = document.getElementById('statusMessageApp');
    const audioPlayerContainer = document.getElementById('audioPlayerContainerApp');
    const synthesizeBtn = document.getElementById('synthesizeBtnApp');

    const TTS_SERVICE_BASE_URL = 'http://localhost:4020'; // Port of your tts-service

    if (ttsForm) {
        ttsForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const text = textInput.value;
            const voiceId = voiceSelect.value;
            const engine = engineSelect.value;

            if (!text.trim()) {
                statusMessage.textContent = 'Please enter some text to synthesize.';
                statusMessage.className = 'error-message'; 
                return;
            }

            if (synthesizeBtn) synthesizeBtn.disabled = true;
            statusMessage.textContent = 'Synthesizing speech, please wait...';
            statusMessage.className = 'info-message';
            audioPlayerContainer.innerHTML = ''; 

            try {
                const response = await fetch(`${TTS_SERVICE_BASE_URL}/api/tts/synthesize`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ text, voiceId, engine }),
                });

                const data = await response.json();

                if (response.ok) {
                    statusMessage.textContent = data.message || 'Speech synthesized successfully!';
                    statusMessage.className = 'success-message';

                    if (data.audioUrl) {
                        const audioPlayer = document.createElement('audio');
                        audioPlayer.controls = true;
                        audioPlayer.src = data.audioUrl; 
                        audioPlayer.onerror = () => {
                            statusMessage.textContent = 'Error: Could not load the audio file. Check TTS service, its logs, and network.';
                            statusMessage.className = 'error-message';
                        };
                        audioPlayerContainer.appendChild(audioPlayer);
                        audioPlayer.play().catch(playError => {
                            console.warn("Audio autoplay was prevented or failed:", playError);
                            statusMessage.textContent += " (Audio ready. Click play if it doesn't start automatically)";
                        });
                    } else {
                         statusMessage.textContent = 'Synthesis successful, but no audio URL was returned.';
                         statusMessage.className = 'warning-message';
                    }
                } else {
                    statusMessage.textContent = `Error: ${data.message || 'Failed to synthesize. Check TTS service logs.'}`;
                    statusMessage.className = 'error-message';
                }
            } catch (error) {
                console.error('TTS request failed:', error);
                statusMessage.textContent = `Request to TTS service failed. Ensure it's running at ${TTS_SERVICE_BASE_URL}. Check console.`;
                statusMessage.className = 'error-message';
            } finally {
                if (synthesizeBtn) synthesizeBtn.disabled = false;
            }
        });
    } else {
        console.error("TTS form 'ttsAppForm' not found on the page.");
    }
});





upload.js-
// frontend-service/public/js/upload.js
document.addEventListener("DOMContentLoaded", () => {
    const uploadForm = document.getElementById("upload-form");
    const tabsContainer = document.querySelector(".language-tabs"); // Assuming only one on this page
    const languageTabsLoading = document.getElementById("languageTabsLoading");
    const tableBody = document.getElementById("audio-table-body");
    const searchBox = document.getElementById("searchBox");
    const uploadButton = document.getElementById("uploadButton");
    const uploadStatus = document.getElementById("uploadStatus");

    // Pagination elements
    const paginationControls = document.getElementById("audioTablePagination");
    const prevPageBtn = document.getElementById("prevPageBtn");
    const nextPageBtn = document.getElementById("nextPageBtn");
    const pageInfo = document.getElementById("pageInfo");

    let allAudiosForCurrentLanguage = [];
    let filteredAudios = [];
    let currentPage = 1;
    const itemsPerPage = 5; // Or 10, as you prefer

    // Use the global populateLanguageTabs function from base.js
    if (tabsContainer && window.populateLanguageTabs) {
        window.populateLanguageTabs(tabsContainer, (selectedLanguage) => {
            currentPage = 1; // Reset page on language change
            if (selectedLanguage) {
                loadAudios(selectedLanguage);
            } else {
                // Handle case where no language is selected or loading failed
                if (tableBody && window.showInfoMessage) window.showInfoMessage(tableBody, "Please select a language to view audio files.", 6);
                else if (tableBody) tableBody.innerHTML = `<tr><td colspan="6" class="no-data-text">Please select a language to view audio files.</td></tr>`;
                if (paginationControls) paginationControls.style.display = 'none';
            }
        }, "Loading language tabs...");
    } else {
        console.error("Language tabs container or populateLanguageTabs function not found.");
        if (languageTabsLoading) languageTabsLoading.textContent = "Error: UI setup failed.";
    }


    async function loadAudios(language) {
        if (!language) {
            if (tableBody && window.showInfoMessage) window.showInfoMessage(tableBody, "No language selected.", 6);
            else if (tableBody) tableBody.innerHTML = `<tr><td colspan="6" class="no-data-text">No language selected.</td></tr>`;
            if (paginationControls) paginationControls.style.display = 'none';
            return;
        }
        if (tableBody && window.showLoadingMessage) window.showLoadingMessage(tableBody, `Loading audio files for ${language}...`, 6);
        else if (tableBody) tableBody.innerHTML = `<tr><td colspan="6" class="loading-text">Loading audio files for ${language}...</td></tr>`;
        
        if (paginationControls) paginationControls.style.display = 'none';

        try {
            const response = await fetch(`http://localhost:4003/upload?language=${encodeURIComponent(language)}`);
            if (!response.ok) throw new Error(`Failed to fetch audios. Status: ${response.status}`);
            allAudiosForCurrentLanguage = await response.json();
            applySearchAndRender();
        } catch (err) {
            console.error("❌ Error loading audios:", err.message);
            if (tableBody && window.showErrorMessage) window.showErrorMessage(tableBody, "Error loading audio files.", 6);
            else if (tableBody) tableBody.innerHTML = `<tr><td colspan="6" class="error-message">Error loading audio files.</td></tr>`;
        }
    }

    function applySearchAndRender() {
        const query = searchBox ? searchBox.value.toLowerCase().trim() : "";
        if (query) {
            filteredAudios = allAudiosForCurrentLanguage.filter(audio =>
                (audio.filePath || "").toLowerCase().includes(query) ||
                (audio.transcription || "").toLowerCase().includes(query) ||
                (audio.remarks || "").toLowerCase().includes(query) ||
                (audio.audioType || "").toLowerCase().includes(query)
            );
        } else {
            filteredAudios = [...allAudiosForCurrentLanguage];
        }
        currentPage = 1;
        renderAudiosPage();
    }
    
    if(searchBox) searchBox.addEventListener("input", applySearchAndRender);

    function renderAudiosPage() {
        if (!tableBody) return;
        tableBody.innerHTML = "";
        
        const colspan = document.getElementById("audio-table")?.querySelector("thead tr")?.cells.length || 6;

        if (filteredAudios.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="${colspan}" class="no-data-text">No audio files found.</td></tr>`;
            if (paginationControls) paginationControls.style.display = 'none';
            return;
        }

        const startIndex = (currentPage - 1) * itemsPerPage;
        const paginatedAudios = filteredAudios.slice(startIndex, startIndex + itemsPerPage);

        paginatedAudios.forEach((audio, index) => {
            const actualIndex = startIndex + index + 1;
            const fileName = audio.filePath.split(/[\\/]/).pop();
            const audioURL = `http://localhost:4003/uploads${audio.filePath}`;

            const row = tableBody.insertRow();
            row.insertCell().textContent = actualIndex;
            const fileNameCell = row.insertCell();
            const link = document.createElement('a');
            link.href = audioURL;
            link.textContent = fileName;
            link.target = "_blank";
            fileNameCell.appendChild(link);
            row.insertCell().textContent = audio.audioType || "N/A";
            row.insertCell().textContent = audio.transcription || "N/A";
            row.insertCell().textContent = audio.remarks || "N/A";
            const actionCell = row.insertCell();
            const deleteButton = document.createElement("button");
            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
            deleteButton.classList.add("action-btn", "delete-btn");
            deleteButton.addEventListener('click', () => deleteAudio(audio.id)); // Use event listener
            actionCell.appendChild(deleteButton);
        });
        
        updatePaginationInfo();
        if (paginationControls) {
            paginationControls.style.display = filteredAudios.length > itemsPerPage ? 'flex' : 'none';
        }
    }

    function updatePaginationInfo() {
        if (!pageInfo || !prevPageBtn || !nextPageBtn) return;
        const totalPages = Math.ceil(filteredAudios.length / itemsPerPage);
        pageInfo.textContent = `Page ${currentPage} of ${totalPages > 0 ? totalPages : 1}`;
        prevPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;
    }

    if(prevPageBtn) prevPageBtn.addEventListener("click", () => {
        if (currentPage > 1) { currentPage--; renderAudiosPage(); }
    });
    if(nextPageBtn) nextPageBtn.addEventListener("click", () => {
        if ((currentPage * itemsPerPage) < filteredAudios.length) {
            currentPage++; renderAudiosPage();
        }
    });

    if(uploadForm) uploadForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (uploadButton) uploadButton.disabled = true;
        if (uploadStatus) {
            uploadStatus.textContent = "Uploading...";
            uploadStatus.className = 'info-message';
            uploadStatus.style.display = 'block';
        }

        // CORRECTED SELECTOR HERE:
        const activeLangTab = document.querySelector(".language-tabs .lang-btn.active"); 
        const language = activeLangTab ? activeLangTab.getAttribute("data-lang") : null;
        
        const audioType = document.getElementById("audioType").value;
        const fileInput = document.getElementById("audioFile");
        const transcription = document.getElementById("transcription").value.trim();
        const remarks = document.getElementById("remarks").value.trim();

        if (!language) {
            alert("⚠️ Please select a language tab first.");
            if (uploadButton) uploadButton.disabled = false;
            if (uploadStatus) uploadStatus.style.display = 'none';
            return;
        }
        if (!fileInput.files.length) {
            alert("⚠️ Please select an audio file.");
            if (uploadButton) uploadButton.disabled = false;
            if (uploadStatus) uploadStatus.style.display = 'none';
            return;
        }

        const formData = new FormData();
        formData.append("audio", fileInput.files[0]);
        formData.append("language", language);
        formData.append("audioType", audioType);
        formData.append("transcription", transcription);
        formData.append("remarks", remarks);

        try {
            const response = await fetch("http://localhost:4003/upload", { method: "POST", body: formData });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Upload failed. Status: ${response.status}` }));
                throw new Error(errorData.message);
            }
            if (uploadStatus) {
                uploadStatus.textContent = "✅ Audio uploaded successfully!";
                uploadStatus.className = 'success-message';
            }
            uploadForm.reset();
            if(language) loadAudios(language); // Refresh list for the current language
        } catch (err) {
            console.error("❌ Error uploading audio:", err.message);
            if (uploadStatus) {
                uploadStatus.textContent = `❌ Failed to upload: ${err.message}`;
                uploadStatus.className = 'error-message';
            }
        } finally {
            if (uploadButton) uploadButton.disabled = false;
            setTimeout(() => { if (uploadStatus) uploadStatus.style.display = 'none'; }, 5000);
        }
    });

    async function deleteAudio(id) {
        if (!confirm("Are you sure you want to delete this audio file?")) return;
        try {
            const response = await fetch(`http://localhost:4003/upload/${id}`, { method: "DELETE" });
            if (response.ok) {
                alert("Audio deleted successfully.");
                const selectedLang = document.querySelector(".language-tabs .lang-btn.active")?.getAttribute("data-lang");
                if (selectedLang) loadAudios(selectedLang);
            } else {
                const errorData = await response.json().catch(() => ({ message: "Failed to delete audio."}));
                alert(`❌ Failed to delete audio: ${errorData.message}`);
            }
        } catch (err) {
            console.error("❌ Error deleting audio:", err.message);
            alert("❌ An error occurred while deleting the audio.");
        }
    }
    // window.deleteAudio = deleteAudio; // Not strictly needed due to addEventListener

    // Initial load is handled by the populateLanguageTabs callback
});




users.js-
// frontend-service/public/js/users.js
document.addEventListener('DOMContentLoaded', () => {
    const userForm = document.getElementById('userForm');
    const userNameInput = document.getElementById('userName'); // Changed from 'name' to 'userName' to match HTML
    const userEmailInput = document.getElementById('userEmail'); // Changed from 'email' to 'userEmail'
    const userPasswordInput = document.getElementById('userPassword'); // Changed from 'password' to 'userPassword'
    const userRoleSelect = document.getElementById('userRole'); // Changed from 'role' to 'userRole'
    const usersTableBody = document.getElementById('usersTableBody');

    const API_BASE_URL = "http://localhost:4016/api/users"; // Assuming user-service runs on 4016

    // Load Users
    async function loadUsers() {
        if (!usersTableBody) return;
        showLoadingMessage(usersTableBody, "Loading users...", 5); // Use helper
        try {
            const response = await fetch(API_BASE_URL);
            if (!response.ok) throw new Error(`Failed to fetch users: ${response.statusText}`);
            const users = await response.json();

            usersTableBody.innerHTML = ""; // Clear loading/previous
            if (users.length === 0) {
                showInfoMessage(usersTableBody, "No users found.", 5);
                return;
            }
            users.forEach((user, index) => {
                const row = usersTableBody.insertRow();
                row.insertCell().textContent = index + 1;
                row.insertCell().textContent = user.name;
                row.insertCell().textContent = user.email;
                row.insertCell().textContent = user.role;
                
                const actionCell = row.insertCell();
                const deleteButton = document.createElement('button');
                deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                deleteButton.classList.add("action-btn", "delete-btn");
                deleteButton.title = `Delete user ${user.name}`;
                deleteButton.addEventListener('click', () => deleteUser(user.id, user.name));
                actionCell.appendChild(deleteButton);
            });
        } catch (err) {
            console.error("Error loading users:", err);
            if (usersTableBody) showErrorMessage(usersTableBody, "Error loading users. Check console.", 5);
        }
    }

    // Create User
    if (userForm) {
        userForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const name = userNameInput.value.trim();
            const email = userEmailInput.value.trim();
            const password = userPasswordInput.value.trim();
            const role = userRoleSelect.value;

            if (!name || !email || !password || !role) {
                alert("All fields are required to create a user.");
                return;
            }

            try {
                const response = await fetch(API_BASE_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, email, password, role }),
                });
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({message: "Failed to create user."}));
                    throw new Error(errorData.message);
                }
                alert("✅ User created successfully!");
                userForm.reset();
                loadUsers(); // Refresh the table
            } catch (err) {
                console.error("❌ Error creating user:", err.message);
                alert(`❌ Error: ${err.message}`);
            }
        });
    }

    // Delete User
    async function deleteUser(id, userName) {
        if (!confirm(`Are you sure you want to delete user "${userName}" (ID: ${id})?`)) return;
        try {
            const response = await fetch(`${API_BASE_URL}/${id}`, { method: "DELETE" });
            if (!response.ok) {
                 const errorData = await response.json().catch(() => ({message: "Failed to delete user."}));
                throw new Error(errorData.message);
            }
            alert(`User "${userName}" deleted successfully.`);
            loadUsers(); // Refresh the table
        } catch (err) {
            console.error("❌ Error deleting user:", err.message);
            alert(`❌ Error: ${err.message}`);
        }
    }
    // window.deleteUser = deleteUser; // Not needed if using addEventListener

    // Initial Load
    loadUsers();
});

  

zones.js-
// frontend-service/public/js/zones.js
document.addEventListener('DOMContentLoaded', () => {
    const zoneMappingForm = document.getElementById('zoneMappingForm'); // Assuming this is the form ID
    const zoneNameInput = document.getElementById('zoneNameInput');
    const announcementTypeDropdown = document.getElementById('announcementTypeZoneDropdown'); // Corrected ID
    const addMappingBtn = document.getElementById('addZoneMappingBtn'); // Corrected ID
    const searchBox = document.getElementById('searchBox');
    const zoneTableBody = document.getElementById('zoneTableBody');

    const ZONE_API_BASE = "http://localhost:4013/api/zones"; // Zone service base URL

    let allZoneMappings = []; // To store all mappings for client-side search

    // Fetch Announcement Types for the dropdown
    async function fetchAnnouncementTypesForZones() {
        if (!announcementTypeDropdown) return;
        try {
            const response = await fetch(`${ZONE_API_BASE}/types`); // Fetches from Zone Service
            if (!response.ok) throw new Error('Failed to fetch announcement types');
            const types = await response.json(); // Expects array of objects like [{id, type}] or just [{type}]

            announcementTypeDropdown.innerHTML = '<option value="">-- Select Announcement Type --</option>';
            if (types.length > 0) {
                types.forEach(typeObj => {
                    // The API for /types in zone.controller.js returns [{id, type}]
                    // The API for /announcementtype/types in script-manager returns array of strings.
                    // Ensure consistency or handle both. Assuming zone service returns {id, type}.
                    const typeName = typeof typeObj === 'string' ? typeObj : typeObj.type;
                    const typeValue = typeof typeObj === 'string' ? typeObj : typeObj.type; // Or typeObj.id if backend expects ID
                    if(typeName) announcementTypeDropdown.add(new Option(typeName, typeValue));
                });
            } else {
                 announcementTypeDropdown.innerHTML = '<option value="">-- No Types Found --</option>';
            }
        } catch (err) {
            console.error("Error loading announcement types for zones:", err);
            if(announcementTypeDropdown) announcementTypeDropdown.innerHTML = '<option value="">-- Error Loading Types --</option>';
        }
    }

    // Load Zone Mappings into the table
    async function loadZoneMappings() {
        if (!zoneTableBody) return;
        showLoadingMessage(zoneTableBody, "Loading zone mappings...", 4);
        try {
            const response = await fetch(`${ZONE_API_BASE}/mappings`);
            if (!response.ok) throw new Error('Failed to fetch zone mappings');
            allZoneMappings = await response.json(); // Expects array like [{id, announcement_type, zone}]
            renderZoneMappings(); // Apply search and render
        } catch (err) {
            console.error("Error loading zone mappings:", err);
            if(zoneTableBody) showErrorMessage(zoneTableBody, "Error loading zone mappings.", 4);
        }
    }
    
    // Render table based on current `allZoneMappings` and search query
    function renderZoneMappings() {
        if (!zoneTableBody) return;
        const query = searchBox ? searchBox.value.toLowerCase().trim() : "";
        const filteredMappings = allZoneMappings.filter(mapping =>
            (mapping.zone_name || mapping.zone || "").toLowerCase().includes(query) ||
            (mapping.announcement_type || "").toLowerCase().includes(query)
        );

        zoneTableBody.innerHTML = "";
        if (filteredMappings.length === 0) {
            showInfoMessage(zoneTableBody, query ? "No mappings match your search." : "No zone mappings found.", 4);
            return;
        }

        filteredMappings.forEach((mapping, index) => {
            const row = zoneTableBody.insertRow();
            row.insertCell().textContent = index + 1;
            row.insertCell().textContent = mapping.zone_name || mapping.zone; // Backend might use 'zone' or 'zone_name'
            row.insertCell().textContent = mapping.announcement_type;
            
            const actionCell = row.insertCell();
            const deleteButton = document.createElement('button');
            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
            deleteButton.classList.add("action-btn", "delete-btn");
            deleteButton.title = `Delete mapping for zone ${mapping.zone_name || mapping.zone}`;
            deleteButton.addEventListener('click', () => deleteZoneMapping(mapping.id, mapping.zone_name || mapping.zone));
            actionCell.appendChild(deleteButton);
        });
    }


    // Add Zone Mapping
    if (addMappingBtn && zoneMappingForm) { // Check form as well
        addMappingBtn.addEventListener('click', async () => { // Changed from form submit to button click
            if (!zoneNameInput || !announcementTypeDropdown) return;
            const zoneName = zoneNameInput.value.trim();
            const announcementType = announcementTypeDropdown.value;

            if (!zoneName || !announcementType) {
                alert("Please enter a Zone Name and select an Announcement Type.");
                return;
            }

            try {
                const response = await fetch(`${ZONE_API_BASE}/mappings`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ zone: zoneName, announcement_type: announcementType })
                });
                if (!response.ok) {
                    const errorData = await response.json().catch(()=>({message: "Failed to add mapping."}));
                    throw new Error(errorData.message);
                }
                alert("Zone mapping added successfully!");
                zoneNameInput.value = ""; // Clear input
                if (announcementTypeDropdown.options.length > 0) announcementTypeDropdown.selectedIndex = 0;
                loadZoneMappings(); // Refresh table
            } catch (err) {
                console.error("Error adding zone mapping:", err);
                alert(`Error: ${err.message}`);
            }
        });
    }

    // Delete Zone Mapping
    async function deleteZoneMapping(mappingId, zoneName) {
        if (!confirm(`Are you sure you want to delete the mapping for zone "${zoneName}" (ID: ${mappingId})?`)) return;
        try {
            const response = await fetch(`${ZONE_API_BASE}/mappings/${mappingId}`, { method: "DELETE" });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({message: "Failed to delete mapping."}));
                throw new Error(errorData.message);
            }
            alert("Zone mapping deleted successfully.");
            loadZoneMappings(); // Refresh table
        } catch (err) {
            console.error("Error deleting zone mapping:", err);
            alert(`Error: ${err.message}`);
        }
    }
    // window.deleteZoneMapping = deleteZoneMapping; // Not needed if using addEventListener

    // Search functionality
    if(searchBox) searchBox.addEventListener('input', renderZoneMappings);

    // Initial Loads
    fetchAnnouncementTypesForZones();
    loadZoneMappings();
});

  


app.js-
// frontend-service/app.js
import express from "express";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";

dotenv.config();

const app = express();
const PORT = process.env.FRONTEND_SERVICE_PORT || 4015;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Serve static files (JS, CSS, images) from the 'public' directory
app.use(express.static(path.join(__dirname, "public")));

// Redirect root to dashboard
app.get("/", (req, res) => res.redirect("/dashboard"));

// Serve clean routes without .html for all pages
const pages = [
  "dashboard",
  "upload",
  "scheduler",
  "announcement-type",
  "sequence",
  "zones",
  "settings",        // Global Settings
  "flight-settings", // Individual Flight Settings
  // "audio-type", // Removed as likely redundant with upload categories
  "users",
  "permissions",
  // "zone-selector", // Removed if not a primary page
  "tts-utility",      // New TTS Utility page
  "logs"
];

pages.forEach((page) => {
  app.get(`/${page}`, (req, res) => {
    const filePath = path.join(__dirname, "public", "html", `${page}.html`);
    res.sendFile(filePath, (err) => {
        if (err) {
            console.error(`Error sending file ${filePath} for /${page}:`, err.status, err.message);
            if (!res.headersSent) {
                 res.status(err.status || 404).send(`Page not found or error serving: ${page}.html`);
            }
        }
    });
  });
});

// A more generic catch-all for 404s if a specific page route isn't matched
app.use((req, res, next) => {
    if (!res.headersSent) {
        res.status(404).sendFile(path.join(__dirname, "public", "html", "404.html"), (err) => {
            // If 404.html doesn't exist, send plain text
            if (err) {
                res.status(404).send("404: Page Not Found");
            }
        });
    }
});

app.listen(PORT, () => {
  console.log(`✅ Frontend Service running at http://localhost:${PORT}`);
});
